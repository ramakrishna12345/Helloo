<?xml version="1.0" encoding="UTF-8"?>
<bpws:process exitOnStandardFault="no" name="EDIOriginationProcess"
    suppressJoinFailure="no"
    targetNamespace="http://www.example.com/EDI872/bpel/EDIOriginationProcess"
    xmlns:aaa="http://www.intel.com/soae/localService/aaaDefinition-2007a/"
    xmlns:bpws="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
    xmlns:exslt="http://exslt.org/dates-and-times"
    xmlns:exslt-common="http://exslt.org/common"
    xmlns:hl7-xf="http://www.intel.com/soae/hl7/"
    xmlns:http-fault="http://www.intel.com/soae/bpelHttpFault-2012a"
    xmlns:icap="http://www.intel.com/soae/localService/icap-2010a/"
    xmlns:kerberos="http://www.intel.com/soae/localService/kerberosKDC-2009a/"
    xmlns:ldap="http://www.intel.com/soae/localService/ldap-2007a/"
    xmlns:md="http://www.intel.com/soae/protocolMetadata-2007a.xsd"
    xmlns:ns="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Receive"
    xmlns:ns0="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAsyncLoadCreateActivityNodeXSLFailed"
    xmlns:ns1="http://www.example.com/EDI872/sftp/bin/EDIOriginationProcess/Receive"
    xmlns:ns10="http://www.example.com/EDI872/sftp/bin/EDIOriginationProcess/Write997File"
    xmlns:ns11="http://www.informatica.com/B2B/X12"
    xmlns:ns12="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteInterchangeFile"
    xmlns:ns13="http://www.example.com/EDI872/sftp/bin/EDIOriginationProcess/WriteInterchangeFile"
    xmlns:ns14="http://www.radian.biz/ClientConnectivity/Xion/Origination/AppConfig"
    xmlns:ns15="http://www.radian.biz/ClientConnectivity/zion/Origination/AppConfig"
    xmlns:ns16="http://www.radian.biz/ClientConnectivity/zion/Origination/StatusCodeConfig"
    xmlns:ns17="http://www.radian.biz/ClientConnectivity/zion/Origination/OnBoardingConfig"
    xmlns:ns18="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow"
    xmlns:ns19="http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationResponse"
    xmlns:ns2="http://www.example.com/EDI872/cde/EDI872"
    xmlns:ns20="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteTALogonSuccess"
    xmlns:ns21="http://www.radian.biz/ClientConnectivity/zion/LoadConfig"
    xmlns:ns22="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"
    xmlns:ns23="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/WriteTALogonSuccess"
    xmlns:ns24="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/ScopeWriteReceiveFailure"
    xmlns:ns25="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteReceiveFailure"
    xmlns:ns26="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/WriteReceiveFailure"
    xmlns:ns27="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/ReceiveFailureTALog"
    xmlns:ns28="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/ReceiveFailureTALog"
    xmlns:ns29="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteRequestToArchiveAtGFH"
    xmlns:ns3="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke"
    xmlns:ns30="http://www.example.com/EDI872/sftp/bin/EDIOriginationProcess/WriteRequestToArchiveAtGFH"
    xmlns:ns31="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity"
    xmlns:ns32="http://www.example.com/EDI872/rawtcp/bin/EDIOriginationProcess/WriteRequestToArchiveAtGFH"
    xmlns:ns33="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk"
    xmlns:ns34="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk"
    xmlns:ns35="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteTALogGFH"
    xmlns:ns36="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/WriteTALogGFH"
    xmlns:ns37="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/ScopeWriteAlarmPointLog"
    xmlns:ns38="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteAlarmPointLog"
    xmlns:ns39="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/WriteAlarmPointLog"
    xmlns:ns4="http://www.example.com/EDI872/ftp/bin/EDIOriginationProcess/Invoke"
    xmlns:ns40="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH"
    xmlns:ns41="http://www.example.com/EDI872/file/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH"
    xmlns:ns42="http://www.example.com/Origination/http/bin/EDIOriginationProcess/Invoke"
    xmlns:ns43="http://www.example.com/Origination/http/bin/EDIOriginationProcess/CleanEDI"
    xmlns:ns44="http://www.example.com/Origination/custom/bin/EDIOriginationProcess/CleanEDI"
    xmlns:ns45="http://www.informatica.com/B2B/X12Wrapper"
    xmlns:ns46="http://www.example.com/Origination/cde/EDI872"
    xmlns:ns47="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Receive"
    xmlns:ns48="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Write997File"
    xmlns:ns49="http://www.example.com/Origination/http/bin/EDIOriginationProcess/WriteEDIInputFileToMatrix"
    xmlns:ns5="http://www.example.com/EDI872/sftp/bin/EDIOriginationProcess/Invoke"
    xmlns:ns50="http://www.example.com/Origination/http/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem"
    xmlns:ns51="http://www.example.com/Origination/rawtcp/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem"
    xmlns:ns52="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem"
    xmlns:ns53="http://Radian.Operations.MortgageIns.Common.MISMOSchemas.APP_MORTGAGE_INSURANCE_APPLICATION_REQUEST_v2_3_1"
    xmlns:ns54="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Write997ACKFile"
    xmlns:ns55="http://www.example.com/Origination/cde/BOA_EDI872"
    xmlns:ns56="http://www.example.com/Origination/cde/BOA_EDI872_latest"
    xmlns:ns57="http://www.radian.biz/ClientConnectivity/zion/Origination/BOAInterchanges"
    xmlns:ns58="http://www.example.com/Origination/http/bin/EDIOriginationProcess/WriteExceptionLOGOS"
    xmlns:ns59="http://www.example.com/Origination/http/bin/EDIOriginationProcess/WriteExceptionToFile"
    xmlns:ns6="http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke1"
    xmlns:ns60="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteExceptionToFile"
    xmlns:ns61="http://www.example.com/Origination/cde/EDI872_BOA"
    xmlns:ns62="http://www.example.com/Origination/http/bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow"
    xmlns:ns63="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogonSuccess"
    xmlns:ns64="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteReceiveFailure"
    xmlns:ns65="http://www.example.com/Origination/file/bin/EDIOriginationProcess/ReceiveFailureTALog"
    xmlns:ns66="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlarmPointLog"
    xmlns:ns67="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogGFH"
    xmlns:ns68="http://www.example.com/Origination/file/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk"
    xmlns:ns69="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH"
    xmlns:ns7="http://www.example.com/EDI872/sftp/bin/EDIOriginationProcess/Invoke1"
    xmlns:ns8="http://www.example.com/EDI872/cde/EDI997"
    xmlns:ns9="http://www.informatica.com/B2B/X12.Wrapper"
    xmlns:saml10="urn:oasis:names:tc:SAML:1.0:assertion"
    xmlns:saml10p="urn:oasis:names:tc:SAML:1.0:protocol"
    xmlns:saml1x-soae="http://www.intel.com/soae/localService/saml1x-2010a/"
    xmlns:saml20="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:saml20-soae="http://www.intel.com/soae/localService/saml20-2010a/"
    xmlns:saml20p="urn:oasis:names:tc:SAML:2.0:protocol"
    xmlns:soae-ab="urn:com.intel.ssg.cbr.ide.actionbuilder"
    xmlns:soae-bpel="http://www.intel.com/soae/bpel/bpel20-2007a/"
    xmlns:soae-cache="http://www.intel.com/soae/data-cache/2007a/"
    xmlns:soae-fault="http://www.intel.com/soae/bpelFault-2009a/"
    xmlns:soae-wsse="http://www.intel.com/soae/localService/wssecDefinition-2007a/"
    xmlns:soae-xf="http://www.intel.com/soae/xpath/"
    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:soapenv12="http://www.w3.org/2003/05/soap-envelope"
    xmlns:sql="urn:soae.intel.com/sql"
    xmlns:sref="http://docs.oasis-open.org/wsbpel/2.0/serviceref"
    xmlns:tns="http://www.example.com/EDI872/bpel/EDIOriginationProcess"
    xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:wsax="http://www.intel.com/soae/ws-addressing/addressing-2008a/"
    xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
    xmlns:wsse200207="http://schemas.xmlsoap.org/ws/2002/07/secext"
    xmlns:wsse200212="http://schemas.xmlsoap.org/ws/2002/12/secext"
    xmlns:wsse200306="http://schemas.xmlsoap.org/ws/2003/06/secext"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/MISMO2.3.1/MORTGAGE_INSURANCE_APPLICATION_REQUEST_v2_3_1.xsd" namespace="http://Radian.Operations.MortgageIns.Common.MISMOSchemas.APP_MORTGAGE_INSURANCE_APPLICATION_REQUEST_v2_3_1"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/X12_4010_872_Wrapper_schema.xsd" namespace="http://www.informatica.com/B2B/X12Wrapper"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="MISMO2.3.1/MORTGAGE_INSURANCE_APPLICATION_REQUEST_v2_3_1_NewNameSpace.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationRequest"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/TransactionActivity.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/StatusCodeConfig.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/Origination/StatusCodeConfig"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/ExceptionConfig.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/LoadConfig.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/LoadConfig"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="systemLib/metadata/metadata.xsd" namespace="http://www.intel.com/soae/protocolMetadata-2007a.xsd"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="systemLib/importedSchemas/soap-envelope.xsd" namespace="http://schemas.xmlsoap.org/soap/envelope/"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="systemLib/importedSchemas/soap-envelope-12.xsd" namespace="http://www.w3.org/2003/05/soap-envelope"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="systemLib/localServices/kerberosKDC.wsdl" namespace="http://www.intel.com/soae/localService/kerberosKDC-2009a/"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/Receive.wsdl" namespace="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Receive"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="systemLib/localServices/soaeBpelFault.xsd" namespace="http://www.intel.com/soae/bpelFault-2009a/"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="systemLib/localServices/ldap.wsdl" namespace="http://www.intel.com/soae/localService/ldap-2007a/"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteAsyncLoadCreateActivityNodeXSLFailed.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAsyncLoadCreateActivityNodeXSLFailed"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="systemLib/localServices/soaeHttpFaults.xsd" namespace="http://www.intel.com/soae/bpelHttpFault-2012a"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/AppConfig.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/Origination/AppConfig"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="xsd/OnBoardingConfig.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/Origination/OnBoardingConfig"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem.wsdl" namespace="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/CleanEDI.wsdl" namespace="http://www.example.com/Origination/custom/bin/EDIOriginationProcess/CleanEDI"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="cdeServices/EDI872_BOA/EDI872_BOA.wsdl" namespace="http://www.example.com/Origination/cde/EDI872_BOA"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="cdeServices/EDI872_BOA/X12_4010_872_BOA_Wrapper_schema.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/Origination/BOAInterchanges"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="cdeServices/EDI872_BOA/X12_4010_872_schema.xsd" namespace="http://www.informatica.com/B2B/X12"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="cdeServices/EDI872/EDI872.wsdl" namespace="http://www.example.com/Origination/cde/EDI872"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="cdeServices/EDI872/X12_4010_872_schema.xsd" namespace="http://www.informatica.com/B2B/X12"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteExceptionToFile.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteExceptionToFile"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow.wsdl" namespace="http://www.example.com/Origination/http/bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="MISMO2.3.1/MORTGAGE_INSURANCE_APPLICATION_RESPONSE_v2_3_1_NewNamespace.xsd" namespace="http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationResponse"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="cdeServices/EDI997/EDI997.wsdl" namespace="http://www.example.com/EDI872/cde/EDI997"/>
    <bpws:import importType="http://www.w3.org/2001/XMLSchema"
        location="cdeServices/EDI997/Validation.xsd" namespace="http://www.informatica.com/B2B/X12"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/Write997ACKFile.wsdl" namespace="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Write997ACKFile"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="systemLib/localServices/icapService.wsdl" namespace="http://www.intel.com/soae/localService/icap-2010a/"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteTALogonSuccess.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogonSuccess"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteReceiveFailure.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteReceiveFailure"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/ReceiveFailureTALog.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/ReceiveFailureTALog"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteAlarmPointLog.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlarmPointLog"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteTALogGFH.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogGFH"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk"/>
    <bpws:import importType="http://schemas.xmlsoap.org/wsdl/"
        location="bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH.wsdl" namespace="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH"/>
    <bpws:partnerLinks>
        <bpws:partnerLink myRole="role" name="Receive" partnerLinkType="ns47:ReceiveServicePartnerLinkType"/>
        <bpws:partnerLink
            name="WriteAsyncLoadCreateActivityNodeXSLFailed"
            partnerLinkType="ns0:WriteAsyncLoadCreateActivityNodeXSLFailedServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="WriteEDIInputFileToDownstreamSystem"
            partnerLinkType="ns52:WriteEDIInputFileToDownstreamSystemServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="CleanEDI"
            partnerLinkType="ns44:CleanEDIServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="EDI872BOA"
            partnerLinkType="ns61:EDI872_BOAPartnerLinkType" partnerRole="EDI872_BOAProvider"/>
        <bpws:partnerLink name="ParseEDI872"
            partnerLinkType="ns46:EDI872PartnerLinkType" partnerRole="EDI872Provider"/>
        <bpws:partnerLink name="WriteExceptionToFile"
            partnerLinkType="ns60:WriteExceptionToFileServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="InvokeOriginationCoreWorkflow"
            partnerLinkType="ns62:InvokeOriginationCoreWorkflowServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="EDI997Parser"
            partnerLinkType="ns8:EDI997PartnerLinkType" partnerRole="EDI997Provider"/>
        <bpws:partnerLink name="Write997ACKFile"
            partnerLinkType="ns54:Write997ACKFileServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="WriteTALogonSuccess"
            partnerLinkType="ns63:WriteTALogonSuccessServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="WriteReceiveFailure"
            partnerLinkType="ns64:WriteReceiveFailureServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="ReceiveFailureTALog"
            partnerLinkType="ns65:ReceiveFailureTALogServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="WriteAlarmPointLog"
            partnerLinkType="ns66:WriteAlarmPointLogServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="WriteTALogGFH"
            partnerLinkType="ns67:WriteTALogGFHServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="GlobalFaultWriteTALogstoDisk"
            partnerLinkType="ns68:GlobalFaultWriteTALogstoDiskServicePartnerLinkType" partnerRole="role"/>
        <bpws:partnerLink name="WriteAlertLogOnReplyFailureGFH"
            partnerLinkType="ns69:WriteAlertLogOnReplyFailureGFHServicePartnerLinkType" partnerRole="role"/>
    </bpws:partnerLinks>
    <bpws:variables>
        <bpws:variable messageType="ns47:ReceiveInput" name="Receive"/>
        <bpws:variable name="Receive_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable element="md:sftpMessage" name="GetMessageMetadata"/>
        <bpws:variable name="StartTime" type="xsd:anyType"/>
        <bpws:variable name="ErrorLogPath" type="xsd:anyType"/>
        <bpws:variable name="TALogPath" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrorToOne" type="xsd:string"/>
        <bpws:variable name="TransactionUUID" type="xsd:anyType"/>
        <bpws:variable name="FileName" type="xsd:anyType"/>
        <bpws:variable name="RecordCount" type="xsd:anyType"/>
        <bpws:variable element="ns21:LoadConfig" name="XMLforLoadingConfigs"/>
        <bpws:variable element="ns31:TRANSACTIONACTIVITY" name="TransactionActivityXML"/>
        <bpws:variable element="ns22:EXCEPTIONS" name="XMLforGlobalException"/>
        <bpws:variable name="ProviderID" type="xsd:anyType"/>
        <bpws:variable name="ProviderName" type="xsd:anyType"/>
        <bpws:variable name="RequestCount" type="xsd:int"/>
        <bpws:variable name="BatchActivity" type="xsd:anyType"/>
        <bpws:variable name="ResponseFlag" type="xsd:anyType"/>
        <bpws:variable name="FileType" type="xsd:anyType"/>
        <bpws:variable name="MessageTransactionUUID" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrorToTwoloadExceptionLogFailed" type="xsd:anyType"/>
        <bpws:variable element="ns22:EXCEPTIONS" name="CreateErrorLogXMLonExceptionXSlLoadFailure"/>
        <bpws:variable element="ns31:TRANSACTIONACTIVITY" name="TAExceptionlogLoadFailure"/>
        <bpws:variable name="LoadExceptionConfigXSL" type="xsd:anyType"/>
        <bpws:variable name="LoadCreateActivityXSLfailure" type="xsd:anyType"/>
        <bpws:variable
            name="WriteLoadCreateActivityNodeXSLFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="WriteAsyncLoadCreateActivityNodeXSLFailed" type="xsd:anyType"/>
        <bpws:variable
            name="WriteAsyncLoadCreateActivityNodeXSLFailed_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="LoadCreateActivityNodeFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="LoadCreateActivityNode" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrortoTwo" type="xsd:string"/>
        <bpws:variable name="AppConfigLoadFailure" type="xsd:anyType"/>
        <bpws:variable name="TALoadAppConfigXSLFailed" type="xsd:anyType"/>
        <bpws:variable name="AppConfigFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable element="ns15:AppConfig" name="AppConfig"/>
        <bpws:variable name="TAAppConfigLoaded" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrortoThreeStatusCodeConfig" type="xsd:string"/>
        <bpws:variable name="StatusCodeConfigLoadfailure" type="xsd:anyType"/>
        <bpws:variable name="TALoadStatusCodeConfigXSLFailed" type="xsd:anyType"/>
        <bpws:variable name="StatusCodeConfigXSLLoadFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable element="ns16:STATUSCODES" name="StatusCodeConfig"/>
        <bpws:variable name="TAStatusCodeConfig" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrortoThreeOnBoardingConfig" type="xsd:anyType"/>
        <bpws:variable name="OnBoardingConfigLoadFailure" type="xsd:anyType"/>
        <bpws:variable name="TALoadOnBoardingConfigXSLFailed" type="xsd:anyType"/>
        <bpws:variable element="ns17:OnBoarding_Config" name="OnBoardingConfig"/>
        <bpws:variable name="TAOnBoardingConfig" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrortoThreeAuthenticationFailed" type="xsd:anyType"/>
        <bpws:variable name="ProviderIDAuthenticationFailure" type="xsd:anyType"/>
        <bpws:variable name="TAProviderIDAuthenticationFailed" type="xsd:anyType"/>
        <bpws:variable name="TAProviderAuthentication" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeInvalidFileExtensionFormatFailed" type="xsd:anyType"/>
        <bpws:variable name="InvalidFileExtensionFormatFailure" type="xsd:anyType"/>
        <bpws:variable name="TAInvalidFileExtensionFormatFailure" type="xsd:anyType"/>
        <bpws:variable name="TAValidEDIFileExtensionFormat" type="xsd:anyType"/>
        <bpws:variable name="IntermediateMISMOVersion" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeAddMISMO231NamespaceFailure" type="xsd:anyType"/>
        <bpws:variable name="AddMISMO231NamespaceFailure" type="xsd:anyType"/>
        <bpws:variable name="TAAddMISMO231NamespaceFailure" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeIncomingRequestSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable name="IncomingRequestSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable name="TAIncomingRequestSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable name="InputFileNameWithoutExt" type="xsd:anyType"/>
        <bpws:variable name="DownstreamSystemSFTPPath" type="xsd:anyType"/>
        <bpws:variable name="WriteEDIInputFileToDownstreamSystemFailure" type="xsd:anyType"/>
        <bpws:variable
            name="TAWriteEDIInputFileToDownstreamSystemFailed" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeWriteEDIInputFileToDownstreamSystem" type="xsd:anyType"/>
        <bpws:variable name="WriteEDIInputFileToDownstreamSystem" type="xsd:anyType"/>
        <bpws:variable
            name="WriteEDIInputFileToDownstreamSystem_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="TAWriteEDIInputFileToDownstreamSystem" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrortoThreeCleanEDIFailed" type="xsd:anyType"/>
        <bpws:variable name="CleanEDIFailure" type="xsd:anyType"/>
        <bpws:variable name="TACleanEDIFailed" type="xsd:anyType"/>
        <bpws:variable messageType="ns44:CleanEDIOutput" name="CleanEDI"/>
        <bpws:variable name="CleanEDI_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="TACleanEDI" type="xsd:anyType"/>
        <bpws:variable name="EDI997Errors" type="xsd:anyType"/>
        <bpws:variable name="InterchangeStart" type="xsd:anyType"/>
        <bpws:variable name="InterchangeEnd" type="xsd:anyType"/>
        <bpws:variable name="ParsedErrorsData" type="xsd:anyType"/>
        <bpws:variable name="TALogErrors" type="xsd:anyType"/>
        <bpws:variable name="TPInterchangeXML" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrortoThreeParseEDI872BOA" type="xsd:anyType"/>
        <bpws:variable name="ParseEDI872FailureBOA" type="xsd:anyType"/>
        <bpws:variable name="TAParseEDI872FailedBOA" type="xsd:anyType"/>
        <bpws:variable messageType="ns61:OutputData" name="EDI872BOA"/>
        <bpws:variable name="SetGlobalErrortoThreeParseEDI872" type="xsd:anyType"/>
        <bpws:variable name="ParseEDI872Failure" type="xsd:anyType"/>
        <bpws:variable name="TAParseEDI872Failed" type="xsd:anyType"/>
        <bpws:variable messageType="ns46:OutputData" name="ParseEDI872"/>
        <bpws:variable name="TAParseEDI872" type="xsd:anyType"/>
        <bpws:variable name="WriteExceptionToFile" type="xsd:anyType"/>
        <bpws:variable name="WriteExceptionToFile_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="TATPErrorLog" type="xsd:boolean"/>
        <bpws:variable element="ns11:interchange" name="InterchangeXML"/>
        <bpws:variable name="EDIError_DevTALog" type="xsd:boolean"/>
        <bpws:variable name="SetGlobalErrortoThreeErrorsInParsedData" type="xsd:anyType"/>
        <bpws:variable name="ErrorsInParsedDataFailure" type="xsd:anyType"/>
        <bpws:variable name="TAErrorsInParsedDataFailed" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeXMLSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable name="InterchangesXMLSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable name="TAInterchangesXMLSchemaValidation" type="xsd:anyType"/>
        <bpws:variable name="InterchangesXMLSchemaValidation" type="xsd:anyType"/>
        <bpws:variable name="TAInterchangesSchemaValidation" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeInterchangesToMISMOTransformationFailure" type="xsd:anyType"/>
        <bpws:variable name="InterchangesToMISMOTransformationFailure" type="xsd:anyType"/>
        <bpws:variable name="TAInterchangesToMISMOTransformationFailed" type="xsd:anyType"/>
        <bpws:variable name="InterchangesToMISMOXSLTransformation" type="xsd:anyType"/>
        <bpws:variable name="TAInterchangesToMISMOTransfromation" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoMISMO231DownstreamSystemXMLSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable
            name="MISMO231DownstreamSystemXMLSchemaValidationFailure" type="xsd:anyType"/>
        <bpws:variable
            name="TAMISMO231DownstreamSystemXMLSchemaValidation" type="xsd:anyType"/>
        <bpws:variable
            name="MISMO231DownstreamSystemXMLSchemaValidation" type="xsd:anyType"/>
        <bpws:variable name="TAMISMO231XMLSchemaValidation" type="xsd:anyType"/>
        <bpws:variable
            name="SetGlobalErrortoThreeInvokeOriginationCoreWorkflowFailure" type="xsd:anyType"/>
        <bpws:variable name="InvokeOriginationCoreWorkflowFailure" type="xsd:anyType"/>
        <bpws:variable name="TAInvokeOriginationCoreWorkflowFailed" type="xsd:anyType"/>
        <bpws:variable
            messageType="ns62:InvokeOriginationCoreWorkflowOutput" name="InvokeOriginationCoreWorkflow"/>
        <bpws:variable name="InvokeOriginationCoreWorkflow_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="LogCoreWorkflowResponse_DEVTaLog" type="xsd:boolean"/>
        <bpws:variable name="TAInvokeOriginationCoreWorkflow" type="xsd:anyType"/>
        <bpws:variable name="EDI997ParserInput" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrorToThreeEDI997ParserFailure" type="xsd:anyType"/>
        <bpws:variable name="EDI997ParserFailure" type="xsd:anyType"/>
        <bpws:variable name="TAEDI997ParserFailure" type="xsd:anyType"/>
        <bpws:variable messageType="ns8:OutputData" name="EDI997Parser"/>
        <bpws:variable name="TAEDI997ParserSucccess" type="xsd:anyType"/>
        <bpws:variable name="ACKFileName" type="xsd:string"/>
        <bpws:variable
            name="SetGlobalErrorToThreeWrite997ACKFileFailure" type="xsd:anyType"/>
        <bpws:variable name="Write997ACKFileFailure" type="xsd:anyType"/>
        <bpws:variable name="TAWrite997ACKFileFailure" type="xsd:anyType"/>
        <bpws:variable name="Write997ACKFile" type="xsd:anyType"/>
        <bpws:variable name="Write997ACKFile_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="TAWrite997ACKFileSuccess" type="xsd:anyType"/>
        <bpws:variable name="SetGlobalErrorToThreeReplyFail" type="xsd:anyType"/>
        <bpws:variable name="ReplyFailure" type="xsd:anyType"/>
        <bpws:variable name="TAReplyFailure" type="xsd:anyType"/>
        <bpws:variable name="TATransactionCompletedSuccess" type="xsd:anyType"/>
        <bpws:variable name="WriteTALogonSuccess" type="xsd:anyType"/>
        <bpws:variable name="WriteTALogonSuccess_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="TALog_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="MarkTransactionFailed" type="xsd:anyType"/>
        <bpws:variable name="GenericFault_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="GenericFailure" type="xsd:anyType"/>
        <bpws:variable name="AppConfigFault_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="GeneralError_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="ResponseFail_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="ReceiveTransactionUUID" type="xsd:anyType"/>
        <bpws:variable name="ReceiveFault_ZIONLog" type="xsd:boolean"/>
        <bpws:variable element="ns22:EXCEPTIONS" name="ReceiveFailure"/>
        <bpws:variable element="ns31:TRANSACTIONACTIVITY" name="ReceiveFailureTAXML"/>
        <bpws:variable name="WriteReceiveFailureFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="WriteReceiveFailure" type="xsd:anyType"/>
        <bpws:variable name="WriteReceiveFailure_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="WriteTAReceiveFailureFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="ReceiveFailureTALog" type="xsd:anyType"/>
        <bpws:variable name="ReceiveFailureTALog_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="ReceiveFailure_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="TAlogReceiveFailure_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="AlarmPointLogWriteFailure_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="WriteAlarmPointLog" type="xsd:anyType"/>
        <bpws:variable name="WriteAlarmPointLog_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="WriteTALogFailureGFH_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="WriteTALogGFH" type="xsd:anyType"/>
        <bpws:variable name="WriteTALogGFH_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="GlobalFaultWriteTALogstoDiskFailed_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="GlobalFaultWriteTALogstoDisk" type="xsd:anyType"/>
        <bpws:variable name="GlobalFaultWriteTALogstoDisk_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable element="ns22:EXCEPTIONS" name="GFHReplyFailExceptionXML"/>
        <bpws:variable
            name="WriteAlertLogOnReplyFailureGFHFailure_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="WriteAlertLogOnReplyFailureGFH" type="xsd:anyType"/>
        <bpws:variable name="WriteAlertLogOnReplyFailureGFH_IMA_Key" type="xsd:anyType">
            <bpws:from>
                <bpws:literal xml:space="preserve">0</bpws:literal>
            </bpws:from>
        </bpws:variable>
        <bpws:variable name="FailureToWriteAlertLogOnReplyFail_ZIONLog" type="xsd:boolean"/>
        <bpws:variable name="GFH_ReplyFailed" type="xsd:boolean"/>
        <bpws:variable name="GlobalFaultExceptionLog" type="xsd:boolean"/>
        <bpws:variable name="GlobalFaultTALog" type="xsd:boolean"/>
    </bpws:variables>
    <bpws:faultHandlers>
        <bpws:catchAll>
            <bpws:sequence>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="MarkTransactionFailed"
                        expression="xpath:{soae-xf:set-request-status-failed()}"
                        keepSrcElementName="false"
                        name="MarkTransactionFailed" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:set-request-status-failed()]]></bpws:from>
                                    <bpws:to variable="MarkTransactionFailed"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="ErrorLogPath"
                        expression="xpath:{'/opt/apps/zion/logs/'}"
                        keepSrcElementName="false"
                        name="AssignErrorLogPath" xDestination="$ErrorLogPath">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['/opt/apps/zion/logs/']]></bpws:from>
                                    <bpws:to variable="ErrorLogPath"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="TALogPath"
                        expression="xpath:{'/opt/apps/zion/transactionlogs/'}"
                        keepSrcElementName="false"
                        name="AssignTALogPath" xDestination="$TALogPath">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['/opt/apps/zion/transactionlogs/']]></bpws:from>
                                    <bpws:to variable="TALogPath"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:if name="If_GlobalError_is_Nan">
                    <bpws:condition><![CDATA[soae-cache:is-nan(soae-cache:get-string('msg:GlobalError'))]]></bpws:condition>
                    <bpws:sequence name="Sequence11">
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="ReceiveTransactionUUID"
                                expression="xpath:{soae-xf:get-UUID()}"
                                keepSrcElementName="false"
                                name="ReceiveTransactionUUID" xDestination="">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-UUID()]]></bpws:from>
                                    <bpws:to variable="ReceiveTransactionUUID"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:TransactionLog clusterName="false"
                                destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                destinationTypeKind="TYPE"
                                destinationVariable="ReceiveFault_ZIONLog"
                                logLevel="info"
                                name="ReceiveFault_ZIONLog"
                                nodeName="false" optionalData="" transactionID="false">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Receive failure happened.',';'))]]></bpws:from>
                                    <bpws:to variable="ReceiveFault_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="ReceiveFault_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:comment>Receive failure happened.</soae-ab:comment>
                            </soae-ab:TransactionLog>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:XMLBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="ReceiveFailure" name="ReceiveFailure">
                                <soae-ab:explicitImports>
                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/ExceptionConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"/>
                                </soae-ab:explicitImports>
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><ns22:EXCEPTIONS>
                                    <ns22:EXCEPTION>
                                    <ns22:RequestUUID>xpath:{$ReceiveTransactionUUID}</ns22:RequestUUID>

                                    <ns22:TransactionID>xpath:{soae-xf:get-transaction-id()}</ns22:TransactionID>

                                    <ns22:CertificateNumber>xpath:{'NA'}</ns22:CertificateNumber>

                                    <ns22:DateTimeStamp>xpath:{soae-xf:get-time()}</ns22:DateTimeStamp>

                                    <ns22:ApplicationName>xpath:{'ZION-Origination'}</ns22:ApplicationName>

                                    <ns22:ExceptionCode>xpath:{'5001'}</ns22:ExceptionCode>

                                    <ns22:ExceptionName>xpath:{'ReceiveFailed'}</ns22:ExceptionName>

                                    <ns22:Description>xpath:{'Failed to receive request'}</ns22:Description>

                                    <ns22:LogLevel>xpath:{'ERROR'}</ns22:LogLevel>

                                    <ns22:Priority>xpath:{'P1'}</ns22:Priority>

                                    <ns22:Severity>xpath:{'CRITICAL'}</ns22:Severity>

                                    <ns22:AdditionalInfo>xpath:{'EDIOriginationProcess - Failed to receive the request'}</ns22:AdditionalInfo>

                                    <ns22:ProviderName>xpath:{'NA'}</ns22:ProviderName>

                                    <ns22:ResponseName>xpath:{'Communication'}</ns22:ResponseName>

                                    <ns22:ResponseCondition>xpath:{'Error'}</ns22:ResponseCondition>

                                    <ns22:ResponseCode>xpath:{'6001'}</ns22:ResponseCode>

                                    <ns22:ResponseDescription>xpath:{'System not available'}</ns22:ResponseDescription>

                                    <ns22:IncomingFileName>xpath:{'NA'}</ns22:IncomingFileName>

                                    </ns22:EXCEPTION>

                                    </ns22:EXCEPTIONS>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="ReceiveFailure"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-time()]]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:DateTimeStamp[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['P1']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Priority[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ReceiveFailed']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ExceptionName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:IncomingFileName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ReceiveTransactionUUID]]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:RequestUUID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['5001']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ExceptionCode[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:CertificateNumber[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Failed to receive request']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Description[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ERROR']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:LogLevel[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-transaction-id()]]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:TransactionID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ZION-Origination']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ApplicationName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Communication']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['EDIOriginationProcess - Failed to receive the request']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:AdditionalInfo[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Error']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseCondition[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['System not available']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseDescription[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ProviderName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['CRITICAL']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Severity[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['6001']]></bpws:from>
                                    <bpws:to variable="ReceiveFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseCode[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:data>
                                    <ns22:EXCEPTIONS xmlns:ns22="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig">
                                    <ns22:EXCEPTION>
                                    <ns22:RequestUUID>xpath:{$ReceiveTransactionUUID}</ns22:RequestUUID>
                                    <ns22:TransactionID>xpath:{soae-xf:get-transaction-id()}</ns22:TransactionID>
                                    <ns22:CertificateNumber>xpath:{'NA'}</ns22:CertificateNumber>
                                    <ns22:DateTimeStamp>xpath:{soae-xf:get-time()}</ns22:DateTimeStamp>
                                    <ns22:ApplicationName>xpath:{'ZION-Origination'}</ns22:ApplicationName>
                                    <ns22:ExceptionCode>xpath:{'5001'}</ns22:ExceptionCode>
                                    <ns22:ExceptionName>xpath:{'ReceiveFailed'}</ns22:ExceptionName>
                                    <ns22:Description>xpath:{'Failed to receive request'}</ns22:Description>
                                    <ns22:LogLevel>xpath:{'ERROR'}</ns22:LogLevel>
                                    <ns22:Priority>xpath:{'P1'}</ns22:Priority>
                                    <ns22:Severity>xpath:{'CRITICAL'}</ns22:Severity>
                                    <ns22:AdditionalInfo>xpath:{'EDIOriginationProcess - Failed to receive the request'}</ns22:AdditionalInfo>
                                    <ns22:ProviderName>xpath:{'NA'}</ns22:ProviderName>
                                    <ns22:ResponseName>xpath:{'Communication'}</ns22:ResponseName>
                                    <ns22:ResponseCondition>xpath:{'Error'}</ns22:ResponseCondition>
                                    <ns22:ResponseCode>xpath:{'6001'}</ns22:ResponseCode>
                                    <ns22:ResponseDescription>xpath:{'System not available'}</ns22:ResponseDescription>
                                    <ns22:IncomingFileName>xpath:{'NA'}</ns22:IncomingFileName>
                                    </ns22:EXCEPTION>
                                    </ns22:EXCEPTIONS>
                                </soae-ab:data>
                                <soae-ab:data2>
                                    <xmlEditorNode created="true"
                                    form="unqualified" index="0"
                                    nodeType="document" qname="{#document}#document">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTION"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}RequestUUID"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{$ReceiveTransactionUUID}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}TransactionID"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.1" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{soae-xf:get-transaction-id()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}CertificateNumber"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.2" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}DateTimeStamp"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.3" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{soae-xf:get-time()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ApplicationName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.4" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.4/@element">
                                    <value>xpath:{'ZION-Origination'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ExceptionCode"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.5" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.5/@element">
                                    <value>xpath:{'5001'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ExceptionName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.6" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.6/@element">
                                    <value>xpath:{'ReceiveFailed'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Description"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.7" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.7/@element">
                                    <value>xpath:{'Failed to receive request'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}LogLevel"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.8" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.8/@element">
                                    <value>xpath:{'ERROR'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Priority"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.9" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.9/@element">
                                    <value>xpath:{'P1'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Severity"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.10" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.10/@element">
                                    <value>xpath:{'CRITICAL'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}AdditionalInfo"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.11" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.11/@element">
                                    <value>xpath:{'EDIOriginationProcess - Failed to receive the request'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ProviderName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.12" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.12/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.13" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.13/@element">
                                    <value>xpath:{'Communication'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseCondition"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.14" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.14/@element">
                                    <value>xpath:{'Error'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseCode"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.15" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.15/@element">
                                    <value>xpath:{'6001'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseDescription"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.16" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.16/@element">
                                    <value>xpath:{'System not available'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}IncomingFileName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.17" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.17/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="1" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0"/>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    </xmlEditorNode>
                                </soae-ab:data2>
                                <soae-ab:variables/>
                            </soae-ab:XMLBuilder>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:XMLBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="ReceiveFailureTAXML" name="ReceiveFailureTAXML">
                                <soae-ab:explicitImports>
                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/TransactionActivity.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity"/>
                                </soae-ab:explicitImports>
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><ns31:TRANSACTIONACTIVITY>
                                    <ns31:HEADER>
                                    <ns31:TransId>xpath:{soae-xf:get-transaction-id()}</ns31:TransId>

                                    <ns31:NodeName>xpath:{soae-xf:get-node-name()}</ns31:NodeName>

                                    <ns31:SourceApplicationName>xpath:{'ZION-Origination'}</ns31:SourceApplicationName>

                                    <ns31:SourceFileIdentifier>xpath:{$ReceiveTransactionUUID}</ns31:SourceFileIdentifier>

                                    <ns31:BatchIdentifier>xpath:{'NA'}</ns31:BatchIdentifier>

                                    <ns31:CertificateIdentifier>xpath:{'NA'}</ns31:CertificateIdentifier>

                                    <ns31:SourceFileName>xpath:{'NA'}</ns31:SourceFileName>

                                    <ns31:TotalRecordCount>xpath:{0}</ns31:TotalRecordCount>

                                    <ns31:TotalMessageCount>xpath:{0}</ns31:TotalMessageCount>

                                    <ns31:TotalTransTimeInSecs>xpath:{0}</ns31:TotalTransTimeInSecs>

                                    <ns31:Status>'FAIL'</ns31:Status>

                                    </ns31:HEADER>

                                    <ns31:ACTIVITIES>
                                    <ns31:ACTIVITY>
                                    <ns31:DateTime>xpath:{soae-xf:get-time()}</ns31:DateTime>

                                    <ns31:Code>xpath:{'5001'}</ns31:Code>

                                    <ns31:Description>xpath:{'Failed to receive request'}</ns31:Description>

                                    </ns31:ACTIVITY>

                                    </ns31:ACTIVITIES>

                                    </ns31:TRANSACTIONACTIVITY>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ZION-Origination']]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceApplicationName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ReceiveTransactionUUID]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceFileIdentifier[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[0]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalMessageCount[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:CertificateIdentifier[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[0]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalTransTimeInSecs[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[0]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalRecordCount[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['5001']]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:Code[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceFileName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-node-name()]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:NodeName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Failed to receive request']]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:Description[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-transaction-id()]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TransId[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:BatchIdentifier[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-time()]]></bpws:from>
                                    <bpws:to variable="ReceiveFailureTAXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:DateTime[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:data>
                                    <ns31:TRANSACTIONACTIVITY xmlns:ns31="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity">
                                    <ns31:HEADER>
                                    <ns31:TransId>xpath:{soae-xf:get-transaction-id()}</ns31:TransId>
                                    <ns31:NodeName>xpath:{soae-xf:get-node-name()}</ns31:NodeName>
                                    <ns31:SourceApplicationName>xpath:{'ZION-Origination'}</ns31:SourceApplicationName>
                                    <ns31:SourceFileIdentifier>xpath:{$ReceiveTransactionUUID}</ns31:SourceFileIdentifier>
                                    <ns31:BatchIdentifier>xpath:{'NA'}</ns31:BatchIdentifier>
                                    <ns31:CertificateIdentifier>xpath:{'NA'}</ns31:CertificateIdentifier>
                                    <ns31:SourceFileName>xpath:{'NA'}</ns31:SourceFileName>
                                    <ns31:TotalRecordCount>xpath:{0}</ns31:TotalRecordCount>
                                    <ns31:TotalMessageCount>xpath:{0}</ns31:TotalMessageCount>
                                    <ns31:TotalTransTimeInSecs>xpath:{0}</ns31:TotalTransTimeInSecs>
                                    <ns31:Status>'FAIL'</ns31:Status>
                                    </ns31:HEADER>
                                    <ns31:ACTIVITIES>
                                    <ns31:ACTIVITY>
                                    <ns31:DateTime>xpath:{soae-xf:get-time()}</ns31:DateTime>
                                    <ns31:Code>xpath:{'5001'}</ns31:Code>
                                    <ns31:Description>xpath:{'Failed to receive request'}</ns31:Description>
                                    </ns31:ACTIVITY>
                                    </ns31:ACTIVITIES>
                                    </ns31:TRANSACTIONACTIVITY>
                                </soae-ab:data>
                                <soae-ab:data2>
                                    <xmlEditorNode created="true"
                                    form="unqualified" index="0"
                                    nodeType="document" qname="{#document}#document">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TransId"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{soae-xf:get-transaction-id()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}NodeName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{soae-xf:get-node-name()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceApplicationName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.2" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'ZION-Origination'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceFileIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.3" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{$ReceiveTransactionUUID}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}BatchIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.4" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.4/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}CertificateIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.5" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.5/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceFileName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.6" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.6/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalRecordCount"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.7" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.7/@element">
                                    <value>xpath:{0}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalMessageCount"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.8" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.8/@element">
                                    <value>xpath:{0}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalTransTimeInSecs"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.9" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.9/@element">
                                    <value>xpath:{0}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Status"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.10" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.10/@element">
                                    <value>'FAIL'</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.11"/>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.1/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}DateTime"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{soae-xf:get-time()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Code"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{'5001'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Description"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.2" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'Failed to receive request'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.3"/>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="Status"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES/@particle/@modelGroup/@particle.0"/>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    </xmlEditorNode>
                                </soae-ab:data2>
                                <soae-ab:variables/>
                            </soae-ab:XMLBuilder>
                        </bpws:extensionActivity>
                        <bpws:scope exitOnStandardFault="no" name="ScopeWriteReceiveFailure">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="true"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="WriteReceiveFailureFailed_ZIONLog"
                                    logLevel="info"
                                    name="WriteReceiveFailureFailed_ZIONLog"
                                    nodeName="true"
                                    optionalData="" transactionID="true">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Transaction ID: ',soae-xf:get-transaction-id(),'; Node name: ',soae-xf:get-node-name(),'; Cluster name: ',soae-xf:get-cluster-name(),'; Comment: ','Alarm point log writing failed for Receive Failure.',';'))]]></bpws:from>

                                    <bpws:to variable="WriteReceiveFailureFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="WriteReceiveFailureFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Alarm point log writing failed for Receive Failure.</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:extensionActivity>
                                <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/ScopeWriteReceiveFailure}ScopeWriteReceiveFailureOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="WriteReceiveFailure"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat(&quot;file:///opt/apps/zion/logs/&quot;,&quot;RDN_&quot;,soae-xf:get-node-name(),'_',$ReceiveTransactionUUID,'_',$ReceiveFailure/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')"
                                    endpointConfigurationType="Configured"
                                    imaKey="WriteReceiveFailure_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="WriteReceiveFailure"
                                    partnerLink="WriteReceiveFailure"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="soae-xf:encode-binary-string(&quot;utf-8&quot;,&quot;base64&quot;,concat(exslt:format-date(&quot;now-local&quot;,&quot;MMM dd HH:mm:ss.SSS&quot;),&quot;|&quot;,soae-xf:get-node-name(),&quot;|&quot;,$ReceiveFailure/ns22:EXCEPTION/ns22:ApplicationName/text(),&quot;|&quot;,$ReceiveFailure/ns22:EXCEPTION/ns22:ExceptionCode/text(),&quot;|&quot;,$ReceiveFailure/ns22:EXCEPTION/ns22:Priority/text(),&quot;|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: &quot;,$ReceiveFailure/ns22:EXCEPTION/ns22:IncomingFileName/text(),&quot;|Source File UUID: &quot;,$ReceiveFailure/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$ReceiveFailure/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$ReceiveFailure/ns22:EXCEPTION/ns22:ProviderName/text(),&quot;|AddlInfo: &quot;,$ReceiveFailure/ns22:EXCEPTION/ns22:AdditionalInfo/text()))"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="WriteReceiveFailureInput"
                                    inputMsgPart="body"
                                    operation="WriteReceiveFailureOperation"
                                    outputMsg="WriteReceiveFailureOutput"
                                    outputMsgPart="body"
                                    port="WriteReceiveFailurePort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteReceiveFailure}WriteReceiveFailureService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteReceiveFailure" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteReceiveFailure.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns64:WriteReceiveFailureInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteReceiveFailure_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:encode-binary-string("utf-8","base64",concat(exslt:format-date("now-local","MMM dd HH:mm:ss.SSS"),"|",soae-xf:get-node-name(),"|",$ReceiveFailure/ns22:EXCEPTION/ns22:ApplicationName/text(),"|",$ReceiveFailure/ns22:EXCEPTION/ns22:ExceptionCode/text(),"|",$ReceiveFailure/ns22:EXCEPTION/ns22:Priority/text(),"|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: ",$ReceiveFailure/ns22:EXCEPTION/ns22:IncomingFileName/text(),"|Source File UUID: ",$ReceiveFailure/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$ReceiveFailure/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$ReceiveFailure/ns22:EXCEPTION/ns22:ProviderName/text(),"|AddlInfo: ",$ReceiveFailure/ns22:EXCEPTION/ns22:AdditionalInfo/text()))]]></bpws:from>
                                    <bpws:to part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat("file:///opt/apps/zion/logs/","RDN_",soae-xf:get-node-name(),'_',$ReceiveTransactionUUID,'_',$ReceiveFailure/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("file:///opt/apps/zion/logs/","RDN_",soae-xf:get-node-name(),'_',$ReceiveTransactionUUID,'_',$ReceiveFailure/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="WriteReceiveFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteReceiveFailureOperation"
                                    partnerLink="WriteReceiveFailure"
                                    portType="ns64:WriteReceiveFailureServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:InvokeBuilder>
                            </bpws:extensionActivity>
                        </bpws:scope>
                        <bpws:scope exitOnStandardFault="no" name="ScopeReceiveFailureTALog">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="WriteTAReceiveFailureFailed_ZIONLog"
                                    logLevel="info"
                                    name="WriteTAReceiveFailureFailed_ZIONLog"
                                    nodeName="false"
                                    optionalData="" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Transaction activity log writing failed on receive failure.',';'))]]></bpws:from>

                                    <bpws:to variable="WriteTAReceiveFailureFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="WriteTAReceiveFailureFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Transaction activity log writing failed on receive failure.</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:sequence name="Sequence12">
                                <bpws:extensionActivity>
                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="ReceiveFailureTALog"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat('file:///opt/apps/zion/transactionlogs/',soae-xf:get-node-name(),'_ZION-Origination_',$ReceiveTransactionUUID,'_',exslt:format-date(&quot;now-local&quot;, &quot;ddMMyyyy&quot;),'-',exslt:format-date(&quot;now-local&quot;, &quot;HHmmssSSS&quot;),'.xml')"
                                    endpointConfigurationType="Configured"
                                    imaKey="ReceiveFailureTALog_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="ReceiveFailureTALog"
                                    partnerLink="ReceiveFailureTALog"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="$ReceiveFailureTAXML"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData
                                    binary="false" oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="ReceiveFailureTALogInput"
                                    inputMsgPart="body"
                                    operation="ReceiveFailureTALogOperation"
                                    outputMsg="ReceiveFailureTALogOutput"
                                    outputMsgPart="body"
                                    port="ReceiveFailureTALogPort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/ReceiveFailureTALog}ReceiveFailureTALogService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/ReceiveFailureTALog" wsdlFileName="/Origination/bin/EDIOriginationProcess/ReceiveFailureTALog.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns65:ReceiveFailureTALogInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($ReceiveFailureTALog_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ReceiveFailureTAXML]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat('file:///opt/apps/zion/transactionlogs/',soae-xf:get-node-name(),'_ZION-Origination_',$ReceiveTransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat('file:///opt/apps/zion/transactionlogs/',soae-xf:get-node-name(),'_ZION-Origination_',$ReceiveTransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="ReceiveFailureTALog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="ReceiveFailureTALogOperation"
                                    partnerLink="ReceiveFailureTALog"
                                    portType="ns65:ReceiveFailureTALogServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:scope>
                        <bpws:extensionActivity>
                            <soae-ab:TransactionLog clusterName="false"
                                destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                destinationTypeKind="TYPE"
                                destinationVariable="ReceiveFailure_ZIONLog"
                                logLevel="info"
                                name="ReceiveFailure_ZIONLog"
                                nodeName="false"
                                optionalData="$ReceiveFailure" transactionID="false">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Exception log follows on Receive failure:',';'),$ReceiveFailure)]]></bpws:from>
                                    <bpws:to variable="ReceiveFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="ReceiveFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:comment>Exception log follows on Receive failure:</soae-ab:comment>
                            </soae-ab:TransactionLog>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:TransactionLog clusterName="false"
                                destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAlogReceiveFailure_ZIONLog"
                                logLevel="info"
                                name="TAlogReceiveFailure_ZIONLog"
                                nodeName="false"
                                optionalData="$ReceiveFailureTAXML" transactionID="false">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Transaction log follows on Receive failure:',';'),$ReceiveFailureTAXML)]]></bpws:from>
                                    <bpws:to variable="TAlogReceiveFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="TAlogReceiveFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:comment>Transaction log follows on Receive failure:</soae-ab:comment>
                            </soae-ab:TransactionLog>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:ReplyBuilder addAttachments="false"
                                compression="identity"
                                destinationVariable=""
                                messageBodyFrom=""
                                name="ReplyReceiveFailure"
                                passThroughEnabled="false"
                                rawEnvelopeFrom=""
                                sendRawEnvelope="false" throwFault="false">
                                <soae-ab:outboundPolicies/>
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:reply
                                    operation="ReceiveOperation"
                                    partnerLink="Receive" portType="ns47:ReceiveServicePortType"/>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:ReplyBuilder>
                        </bpws:extensionActivity>
                        <bpws:exit name="ExitOnReceiveFailure"/>
                    </bpws:sequence>
                    <bpws:elseif>
                        <bpws:condition><![CDATA[soae-cache:get-string('msg:GlobalError')='01']]></bpws:condition>
                        <bpws:sequence name="Sequence13">
                            <bpws:extensionActivity>
                                <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="GenericFault_ZIONLog"
                                    logLevel="info"
                                    name="GenericFault_ZIONLog"
                                    nodeName="false" optionalData="" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Generic fault occured in wrokflow process.',';'))]]></bpws:from>
                                    <bpws:to variable="GenericFault_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="GenericFault_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Generic fault occured in wrokflow process.</soae-ab:comment>
                                </soae-ab:TransactionLog>
                            </bpws:extensionActivity>
                            <bpws:extensionActivity>
                                <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="GenericFailure"
                                    from="$XMLforGlobalException"
                                    name="GenericFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','5011','ExceptionName','GenericFailure','Description','Generic failure occurred processing transaction','Loglevel','ERROR','Severity','CRITICAL','Priority','P1','AdditionalInfo','EDIOriginationProcess - NA','ProviderName',$ProviderName,'ResponseName','Application','ResponseCondition','Error','ResponseCode','5001','ResponseDescription','Application Error','IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="GenericFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'5011'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="'GenericFailure'"/>
                                    <soae-ab:param
                                    name="Description" value="'Generic failure occurred processing transaction'"/>
                                    <soae-ab:param name="Loglevel" value="'ERROR'"/>
                                    <soae-ab:param name="Severity" value="'CRITICAL'"/>
                                    <soae-ab:param name="Priority" value="'P1'"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="'EDIOriginationProcess - NA'"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="'Application'"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="'Error'"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="'5001'"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="'Application Error'"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                </soae-ab:XSLTransform>
                            </bpws:extensionActivity>
                            <bpws:extensionActivity>
                                <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$GenericFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateGenericFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$GenericFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:AssignBuilder>
                            </bpws:extensionActivity>
                        </bpws:sequence>
                    </bpws:elseif>
                    <bpws:elseif>
                        <bpws:condition><![CDATA[soae-cache:get-string('msg:GlobalError')='02' ]]></bpws:condition>
                        <bpws:extensionActivity>
                            <soae-ab:TransactionLog clusterName="false"
                                destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                destinationTypeKind="TYPE"
                                destinationVariable="AppConfigFault_ZIONLog"
                                logLevel="info"
                                name="AppConfigFault_ZIONLog"
                                nodeName="false" optionalData="" transactionID="false">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Application configuration fault occured.',';'))]]></bpws:from>
                                    <bpws:to variable="AppConfigFault_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="AppConfigFault_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:comment>Application configuration fault occured.</soae-ab:comment>
                            </soae-ab:TransactionLog>
                        </bpws:extensionActivity>
                    </bpws:elseif>
                    <bpws:elseif>
                        <bpws:condition><![CDATA[soae-cache:get-string('msg:GlobalError')='03' ]]></bpws:condition>
                        <bpws:sequence name="Sequence14">
                            <bpws:extensionActivity>
                                <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="GeneralError_ZIONLog"
                                    logLevel="info"
                                    name="GeneralError_ZIONLog"
                                    nodeName="false" optionalData="" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','General error.',';'))]]></bpws:from>
                                    <bpws:to variable="GeneralError_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="GeneralError_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>General error.</soae-ab:comment>
                                </soae-ab:TransactionLog>
                            </bpws:extensionActivity>
                            <bpws:extensionActivity>
                                <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="ErrorLogPath"
                                    expression="xpath:{$AppConfig/ns15:ErrorLogPath/text()}"
                                    keepSrcElementName="false"
                                    name="UpdateErrLogPath" xDestination="$ErrorLogPath">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$AppConfig/ns15:ErrorLogPath/text()]]></bpws:from>
                                    <bpws:to variable="ErrorLogPath"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:AssignBuilder>
                            </bpws:extensionActivity>
                            <bpws:extensionActivity>
                                <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TALogPath"
                                    expression="xpath:{$AppConfig/ns15:TransactionActivityPath/text()}"
                                    keepSrcElementName="false"
                                    name="UpdateTALogPath" xDestination="$TALogPath">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$AppConfig/ns15:TransactionActivityPath/text()]]></bpws:from>
                                    <bpws:to variable="TALogPath"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:AssignBuilder>
                            </bpws:extensionActivity>
                        </bpws:sequence>
                    </bpws:elseif>
                    <bpws:elseif>
                        <bpws:condition><![CDATA[soae-cache:get-string('msg:GlobalError')='04' ]]></bpws:condition>
                        <bpws:extensionActivity>
                            <soae-ab:TransactionLog clusterName="false"
                                destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                destinationTypeKind="TYPE"
                                destinationVariable="ResponseFail_ZIONLog"
                                logLevel="info"
                                name="ResponseFail_ZIONLog"
                                nodeName="false" optionalData="" transactionID="false">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Response failed.',';'))]]></bpws:from>
                                    <bpws:to variable="ResponseFail_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="ResponseFail_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:comment>Response failed.</soae-ab:comment>
                            </soae-ab:TransactionLog>
                        </bpws:extensionActivity>
                    </bpws:elseif>
                </bpws:if>
                <bpws:scope exitOnStandardFault="no" name="ScopeWriteAlarmPointLog">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="true"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="AlarmPointLogWriteFailure_ZIONLog"
                                    logLevel="info"
                                    name="AlarmPointLogWriteFailure_ZIONLog"
                                    nodeName="true"
                                    optionalData="$XMLforGlobalException" transactionID="true">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Transaction ID: ',soae-xf:get-transaction-id(),'; Node name: ',soae-xf:get-node-name(),'; Cluster name: ',soae-xf:get-cluster-name(),'; Comment: ','AlarmPoint log writing failed:',';'),$XMLforGlobalException)]]></bpws:from>

                                    <bpws:to variable="AlarmPointLogWriteFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="AlarmPointLogWriteFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>AlarmPoint log writing failed:</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:extensionActivity>
                        <soae-ab:InvokeBuilder addAttachments="false"
                            allowCrossAppInvocation="false"
                            allowDynamicInterappInvocation="false"
                            allowLocalInvocation="false"
                            bindingType="Plain" compression="identity"
                            destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/ScopeWriteAlarmPointLog}ScopeWriteAlarmPointLogOutput"
                            destinationTypeKind="MESSAGE"
                            destinationVariable="WriteAlarmPointLog"
                            dontExtractMsgToVar="false"
                            dynamicAddress="concat(&quot;file://&quot;,$ErrorLogPath,&quot;RDN_&quot;,soae-xf:get-node-name(),'_',$TransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')"
                            endpointConfigurationType="Configured"
                            imaKey="WriteAlarmPointLog_IMA_Key"
                            inboundPoliciesGroup="" messageBodyFrom=""
                            multipartInboundData="false"
                            multipartOutboundData="false"
                            name="WriteAlarmPointLog"
                            partnerLink="WriteAlarmPointLog"
                            passThroughEnabled="false"
                            rawEnvelopeFrom=""
                            receiveRawEnvelope="false"
                            sendRawEnvelope="false" throwFault="false"
                            timeout="xpath:{}" useDynamicAddress="true">
                            <soae-ab:outputDataMapping partName="" xpath="soae-xf:encode-binary-string(&quot;utf-8&quot;,&quot;base64&quot;,concat(exslt:format-date(&quot;now-local&quot;,&quot;MMM dd HH:mm:ss.SSS&quot;),&quot;|&quot;,soae-xf:get-node-name(),&quot;|&quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:ApplicationName/text(),&quot;|&quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode/text(),&quot;|&quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:Priority/text(),&quot;|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: &quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:IncomingFileName/text(),&quot;|Source File UUID: &quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:ProviderName/text(),&quot;|AddlInfo: &quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:AdditionalInfo/text()))"/>
                            <soae-ab:outboundPolicies/>
                            <soae-ab:inputData binary="true"
                                empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                            <soae-ab:outputData binary="false"
                                oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                            <soae-ab:fileTransport
                                serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                            <soae-ab:wsdlEndpointConfig defaultFlags="0"
                                inputMsg="WriteAlarmPointLogInput"
                                inputMsgPart="body"
                                operation="WriteAlarmPointLogOperation"
                                outputMsg="WriteAlarmPointLogOutput"
                                outputMsgPart="body"
                                port="WriteAlarmPointLogPort"
                                service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlarmPointLog}WriteAlarmPointLogService"
                                soapVersion="1.1"
                                tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlarmPointLog" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteAlarmPointLog.wsdl"/>
                            <soae-ab:inboundPolicies/>
                            <bpws:scope>
                                <bpws:variables>
                                    <bpws:variable name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns66:WriteAlarmPointLogInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                </bpws:variables>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteAlarmPointLog_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:encode-binary-string("utf-8","base64",concat(exslt:format-date("now-local","MMM dd HH:mm:ss.SSS"),"|",soae-xf:get-node-name(),"|",$XMLforGlobalException/ns22:EXCEPTION/ns22:ApplicationName/text(),"|",$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode/text(),"|",$XMLforGlobalException/ns22:EXCEPTION/ns22:Priority/text(),"|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: ",$XMLforGlobalException/ns22:EXCEPTION/ns22:IncomingFileName/text(),"|Source File UUID: ",$XMLforGlobalException/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:ProviderName/text(),"|AddlInfo: ",$XMLforGlobalException/ns22:EXCEPTION/ns22:AdditionalInfo/text()))]]></bpws:from>
                                    <bpws:to part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat("file://",$ErrorLogPath,"RDN_",soae-xf:get-node-name(),'_',$TransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("file://",$ErrorLogPath,"RDN_",soae-xf:get-node-name(),'_',$TransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="WriteAlarmPointLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteAlarmPointLogOperation"
                                    partnerLink="WriteAlarmPointLog"
                                    portType="ns66:WriteAlarmPointLogServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                </bpws:sequence>
                            </bpws:scope>
                        </soae-ab:InvokeBuilder>
                    </bpws:extensionActivity>
                </bpws:scope>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="TransactionActivityXML"
                        expression="xpath:{'FAIL'}"
                        keepSrcElementName="false"
                        name="UpdateTALogHeadertoFAIL" xDestination="$TransactionActivityXML/ns31:HEADER/ns31:Status">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['FAIL']]></bpws:from>
                                    <bpws:to><![CDATA[$TransactionActivityXML/ns31:HEADER/ns31:Status]]></bpws:to>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="TransactionActivityXML"
                        expression="xpath:{soae-xf:calculate-time-delta($StartTime,soae-xf:get-time())}"
                        keepSrcElementName="false"
                        name="GlobalFaultUpdateTATimeTaken" xDestination="$TransactionActivityXML/ns31:HEADER/ns31:TotalTransTimeInSecs">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:calculate-time-delta($StartTime,soae-xf:get-time())]]></bpws:from>
                                    <bpws:to><![CDATA[$TransactionActivityXML/ns31:HEADER/ns31:TotalTransTimeInSecs]]></bpws:to>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:if name="If_AppConfig_is_Loaded">
                    <bpws:condition><![CDATA[soae-cache:get-string('msg:GlobalError')!='02']]></bpws:condition>
                    <bpws:if name="If_Write_TALog_Enabled">
                        <bpws:condition><![CDATA[translate($AppConfig/ns15:WriteTALogsEnabled,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')='TRUE'
                        ]]></bpws:condition>
                        <bpws:scope exitOnStandardFault="no" name="ScopeGlobalFaultWriteTALogstoDisk">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="true"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="GlobalFaultWriteTALogstoDiskFailed_ZIONLog"
                                    logLevel="info"
                                    name="GlobalFaultWriteTALogstoDiskFailed_ZIONLog"
                                    nodeName="true"
                                    optionalData="$TransactionActivityXML" transactionID="true">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Transaction ID: ',soae-xf:get-transaction-id(),'; Node name: ',soae-xf:get-node-name(),'; Cluster name: ',soae-xf:get-cluster-name(),'; Comment: ','Unable to write Transaction Activity logs to disk. Transaction Activity details follow:',';'),$TransactionActivityXML)]]></bpws:from>

                                    <bpws:to variable="GlobalFaultWriteTALogstoDiskFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="GlobalFaultWriteTALogstoDiskFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Unable to write Transaction Activity logs to disk. Transaction Activity details follow:</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:extensionActivity>
                                <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="GlobalFaultWriteTALogstoDisk"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat('file://',$TALogPath,soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date(&quot;now-local&quot;, &quot;ddMMyyyy&quot;),'-',exslt:format-date(&quot;now-local&quot;, &quot;HHmmssSSS&quot;),'.xml')"
                                    endpointConfigurationType="Configured"
                                    imaKey="GlobalFaultWriteTALogstoDisk_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="GlobalFaultWriteTALogstoDisk"
                                    partnerLink="GlobalFaultWriteTALogstoDisk"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="$TransactionActivityXML"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData binary="false"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="GlobalFaultWriteTALogstoDiskInput"
                                    inputMsgPart="body"
                                    operation="GlobalFaultWriteTALogstoDiskOperation"
                                    outputMsg="GlobalFaultWriteTALogstoDiskOutput"
                                    outputMsgPart="body"
                                    port="GlobalFaultWriteTALogstoDiskPort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk}GlobalFaultWriteTALogstoDiskService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk" wsdlFileName="/Origination/bin/EDIOriginationProcess/GlobalFaultWriteTALogstoDisk.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns68:GlobalFaultWriteTALogstoDiskInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($GlobalFaultWriteTALogstoDisk_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionActivityXML]]></bpws:from>
                                    <bpws:to part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat('file://',$TALogPath,soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat('file://',$TALogPath,soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="GlobalFaultWriteTALogstoDisk"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="GlobalFaultWriteTALogstoDiskOperation"
                                    partnerLink="GlobalFaultWriteTALogstoDisk"
                                    portType="ns68:GlobalFaultWriteTALogstoDiskServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:InvokeBuilder>
                            </bpws:extensionActivity>
                        </bpws:scope>
                    </bpws:if>
                    <bpws:else>
                        <bpws:sequence name="Sequence16">
                            <bpws:scope exitOnStandardFault="no" name="ScopeWriteTALogonFault_hardcodedPath">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="WriteTALogFailureGFH_ZIONLog"
                                    logLevel="info"
                                    name="WriteTALogFailureGFH_ZIONLog"
                                    nodeName="false"
                                    optionalData="" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Unable to write Transaction Activity logs to disk. Transaction Activity details follow:',';'))]]></bpws:from>

                                    <bpws:to variable="WriteTALogFailureGFH_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="WriteTALogFailureGFH_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Unable to write Transaction Activity logs to disk. Transaction Activity details follow:</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:extensionActivity>
                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="WriteTALogGFH"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat('file://',$TALogPath,soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date(&quot;now-local&quot;, &quot;ddMMyyyy&quot;),'-',exslt:format-date(&quot;now-local&quot;, &quot;HHmmssSSS&quot;),'.xml')"
                                    endpointConfigurationType="Configured"
                                    imaKey="WriteTALogGFH_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="WriteTALogGFH"
                                    partnerLink="WriteTALogGFH"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="$TransactionActivityXML"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData
                                    binary="false" oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="WriteTALogGFHInput"
                                    inputMsgPart="body"
                                    operation="WriteTALogGFHOperation"
                                    outputMsg="WriteTALogGFHOutput"
                                    outputMsgPart="body"
                                    port="WriteTALogGFHPort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogGFH}WriteTALogGFHService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogGFH" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteTALogGFH.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns67:WriteTALogGFHInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteTALogGFH_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionActivityXML]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat('file://',$TALogPath,soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat('file://',$TALogPath,soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="WriteTALogGFH"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteTALogGFHOperation"
                                    partnerLink="WriteTALogGFH"
                                    portType="ns67:WriteTALogGFHServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                </bpws:extensionActivity>
                            </bpws:scope>
                        </bpws:sequence>
                    </bpws:else>
                </bpws:if>
                <bpws:if name="If_Response_Sent">
                    <bpws:condition><![CDATA[$ResponseFlag='false']]></bpws:condition>
                    <bpws:scope exitOnStandardFault="no" name="ScopeReplyatGFH">
                        <bpws:faultHandlers>
                            <bpws:catchAll>
                                <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:XMLBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="GFHReplyFailExceptionXML" name="GFHReplyFailExceptionXML">
                                    <soae-ab:explicitImports>
                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/ExceptionConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"/>
                                    </soae-ab:explicitImports>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><ns22:EXCEPTIONS>
                                    <ns22:EXCEPTION>
                                    <ns22:RequestUUID>xpath:{$TransactionUUID}</ns22:RequestUUID>

                                    <ns22:TransactionID>xpath:{soae-xf:get-transaction-id()}</ns22:TransactionID>

                                    <ns22:CertificateNumber>xpath:{'NA'}</ns22:CertificateNumber>

                                    <ns22:DateTimeStamp>xpath:{soae-xf:get-time()}</ns22:DateTimeStamp>

                                    <ns22:ApplicationName>xpath:{'ZION-Origination'}</ns22:ApplicationName>

                                    <ns22:ExceptionCode>xpath:{'5010'}</ns22:ExceptionCode>

                                    <ns22:ExceptionName>xpath:{'ResponseFailure'}</ns22:ExceptionName>

                                    <ns22:Description>xpath:{'Failed to respond back to calling system'}</ns22:Description>

                                    <ns22:LogLevel>xpath:{'ERROR'}</ns22:LogLevel>

                                    <ns22:Priority>xpath:{'P1'}</ns22:Priority>

                                    <ns22:Severity>xpath:{'CRITICAL'}</ns22:Severity>

                                    <ns22:AdditionalInfo>xpath:{'EDIOriginationProcess - N/A'}</ns22:AdditionalInfo>

                                    <ns22:ProviderName>xpath:{$ProviderName}</ns22:ProviderName>

                                    <ns22:ResponseName>xpath:{'Communication Failure'}</ns22:ResponseName>

                                    <ns22:ResponseCondition>xpath:{'Error'}</ns22:ResponseCondition>

                                    <ns22:ResponseCode>xpath:{'6001'}</ns22:ResponseCode>

                                    <ns22:ResponseDescription>xpath:{'System not available'}</ns22:ResponseDescription>

                                    <ns22:IncomingFileName>xpath:{$FileName}</ns22:IncomingFileName>

                                    </ns22:EXCEPTION>

                                    </ns22:EXCEPTIONS>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-time()]]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:DateTimeStamp[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['P1']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Priority[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ResponseFailure']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ExceptionName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$FileName]]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:IncomingFileName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionUUID]]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:RequestUUID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['5010']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ExceptionCode[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:CertificateNumber[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Failed to respond back to calling system']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Description[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ERROR']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:LogLevel[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-transaction-id()]]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:TransactionID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ZION-Origination']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ApplicationName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Communication Failure']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['EDIOriginationProcess - N/A']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:AdditionalInfo[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Error']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseCondition[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['System not available']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseDescription[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ProviderName]]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ProviderName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['CRITICAL']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Severity[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['6001']]></bpws:from>
                                    <bpws:to variable="GFHReplyFailExceptionXML">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseCode[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:data>
                                    <ns22:EXCEPTIONS xmlns:ns22="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig">
                                    <ns22:EXCEPTION>
                                    <ns22:RequestUUID>xpath:{$TransactionUUID}</ns22:RequestUUID>
                                    <ns22:TransactionID>xpath:{soae-xf:get-transaction-id()}</ns22:TransactionID>
                                    <ns22:CertificateNumber>xpath:{'NA'}</ns22:CertificateNumber>
                                    <ns22:DateTimeStamp>xpath:{soae-xf:get-time()}</ns22:DateTimeStamp>
                                    <ns22:ApplicationName>xpath:{'ZION-Origination'}</ns22:ApplicationName>
                                    <ns22:ExceptionCode>xpath:{'5010'}</ns22:ExceptionCode>
                                    <ns22:ExceptionName>xpath:{'ResponseFailure'}</ns22:ExceptionName>
                                    <ns22:Description>xpath:{'Failed to respond back to calling system'}</ns22:Description>
                                    <ns22:LogLevel>xpath:{'ERROR'}</ns22:LogLevel>
                                    <ns22:Priority>xpath:{'P1'}</ns22:Priority>
                                    <ns22:Severity>xpath:{'CRITICAL'}</ns22:Severity>
                                    <ns22:AdditionalInfo>xpath:{'EDIOriginationProcess - N/A'}</ns22:AdditionalInfo>
                                    <ns22:ProviderName>xpath:{$ProviderName}</ns22:ProviderName>
                                    <ns22:ResponseName>xpath:{'Communication Failure'}</ns22:ResponseName>
                                    <ns22:ResponseCondition>xpath:{'Error'}</ns22:ResponseCondition>
                                    <ns22:ResponseCode>xpath:{'6001'}</ns22:ResponseCode>
                                    <ns22:ResponseDescription>xpath:{'System not available'}</ns22:ResponseDescription>
                                    <ns22:IncomingFileName>xpath:{$FileName}</ns22:IncomingFileName>
                                    </ns22:EXCEPTION>
                                    </ns22:EXCEPTIONS>
                                    </soae-ab:data>
                                    <soae-ab:data2>
                                    <xmlEditorNode
                                    created="true"
                                    form="unqualified"
                                    index="0"
                                    nodeType="document" qname="{#document}#document">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTION"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}RequestUUID"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{$TransactionUUID}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}TransactionID"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.1" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{soae-xf:get-transaction-id()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}CertificateNumber"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.2" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}DateTimeStamp"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.3" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{soae-xf:get-time()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ApplicationName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.4" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.4/@element">
                                    <value>xpath:{'ZION-Origination'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ExceptionCode"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.5" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.5/@element">
                                    <value>xpath:{'5010'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ExceptionName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.6" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.6/@element">
                                    <value>xpath:{'ResponseFailure'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Description"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.7" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.7/@element">
                                    <value>xpath:{'Failed to respond back to calling system'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}LogLevel"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.8" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.8/@element">
                                    <value>xpath:{'ERROR'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Priority"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.9" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.9/@element">
                                    <value>xpath:{'P1'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Severity"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.10" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.10/@element">
                                    <value>xpath:{'CRITICAL'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}AdditionalInfo"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.11" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.11/@element">
                                    <value>xpath:{'EDIOriginationProcess - N/A'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ProviderName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.12" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.12/@element">
                                    <value>xpath:{$ProviderName}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.13" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.13/@element">
                                    <value>xpath:{'Communication Failure'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseCondition"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.14" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.14/@element">
                                    <value>xpath:{'Error'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseCode"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.15" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.15/@element">
                                    <value>xpath:{'6001'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseDescription"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.16" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.16/@element">
                                    <value>xpath:{'System not available'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}IncomingFileName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.17" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.17/@element">
                                    <value>xpath:{$FileName}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="1" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0"/>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    </xmlEditorNode>
                                    </soae-ab:data2>
                                    <soae-ab:variables/>
                                    </soae-ab:XMLBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:if name="If_Alert_AlreadySent">
                                    <bpws:condition><![CDATA[string($XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode)='5010']]></bpws:condition>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="GFH_ReplyFailed"
                                    logLevel="info"
                                    name="GFH_ReplyFailed"
                                    nodeName="false"
                                    optionalData="$GFHReplyFailExceptionXML" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Failed to reply from GFH.',';'),$GFHReplyFailExceptionXML)]]></bpws:from>

                                    <bpws:to variable="GFH_ReplyFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="GFH_ReplyFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Failed to reply from GFH.</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    <bpws:else>
                                    <bpws:sequence name="Sequence15">
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeAlertLogOnReplyFailureGFH">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>

                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="WriteAlertLogOnReplyFailureGFHFailure_ZIONLog"
                                    logLevel="info"
                                    name="WriteAlertLogOnReplyFailureGFHFailure_ZIONLog"
                                    nodeName="false"
                                    optionalData="$GFHReplyFailExceptionXML" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Response failure at Global fault handler.',';'),$GFHReplyFailExceptionXML)]]></bpws:from>

                                    <bpws:to variable="WriteAlertLogOnReplyFailureGFHFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="WriteAlertLogOnReplyFailureGFHFailure_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Response failure at Global fault handler.</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence17">
                                    <bpws:extensionActivity>

                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="WriteAlertLogOnReplyFailureGFH"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat(&quot;file://&quot;,$ErrorLogPath,&quot;RDN_&quot;,soae-xf:get-node-name(),'_',$TransactionUUID,'_',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')"
                                    endpointConfigurationType="Configured"
                                    imaKey="WriteAlertLogOnReplyFailureGFH_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="WriteAlertLogOnReplyFailureGFH"
                                    partnerLink="WriteAlertLogOnReplyFailureGFH"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">

                                    <soae-ab:outputDataMapping
                                    partName="" xpath="soae-xf:encode-binary-string(&quot;utf-8&quot;,&quot;base64&quot;,concat(exslt:format-date(&quot;now-local&quot;,&quot;MMM dd HH:mm:ss.SSS&quot;),&quot;|&quot;,soae-xf:get-node-name(),&quot;|&quot;,$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ApplicationName/text(),&quot;|&quot;,$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ExceptionCode/text(),&quot;|&quot;,$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:Priority/text(),&quot;|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: &quot;,$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:IncomingFileName/text(),&quot;|Source File UUID: &quot;,$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ProviderName/text(),&quot;|AddlInfo: &quot;,$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:AdditionalInfo/text()))"/>
                                    <soae-ab:outboundPolicies/>

                                    <soae-ab:inputData
                                    binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>

                                    <soae-ab:outputData
                                    binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>

                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>

                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="WriteAlertLogOnReplyFailureGFHInput"
                                    inputMsgPart="body"
                                    operation="WriteAlertLogOnReplyFailureGFHOperation"
                                    outputMsg="WriteAlertLogOnReplyFailureGFHOutput"
                                    outputMsgPart="body"
                                    port="WriteAlertLogOnReplyFailureGFHPort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH}WriteAlertLogOnReplyFailureGFHService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteAlertLogOnReplyFailureGFH.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>

                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>

                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>

                                    <bpws:variable
                                    messageType="ns69:WriteAlertLogOnReplyFailureGFHInput" name="reply_internal_OutputVariable"/>

                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteAlertLogOnReplyFailureGFH_IMA_Key)]]></bpws:from>

                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>

                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:encode-binary-string("utf-8","base64",concat(exslt:format-date("now-local","MMM dd HH:mm:ss.SSS"),"|",soae-xf:get-node-name(),"|",$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ApplicationName/text(),"|",$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ExceptionCode/text(),"|",$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:Priority/text(),"|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: ",$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:IncomingFileName/text(),"|Source File UUID: ",$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ProviderName/text(),"|AddlInfo: ",$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:AdditionalInfo/text()))]]></bpws:from>

                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat("file://",$ErrorLogPath,"RDN_",soae-xf:get-node-name(),'_',$TransactionUUID,'_',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>

                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("file://",$ErrorLogPath,"RDN_",soae-xf:get-node-name(),'_',$TransactionUUID,'_',$GFHReplyFailExceptionXML/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')]]></bpws:from>

                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>

                                    <bpws:to partnerLink="WriteAlertLogOnReplyFailureGFH"/>
                                    </bpws:copy>
                                    </bpws:assign>

                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteAlertLogOnReplyFailureGFHOperation"
                                    partnerLink="WriteAlertLogOnReplyFailureGFH"
                                    portType="ns69:WriteAlertLogOnReplyFailureGFHServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="FailureToWriteAlertLogOnReplyFail_ZIONLog"
                                    logLevel="info"
                                    name="FailureToWriteAlertLogOnReplyFail_ZIONLog"
                                    nodeName="false"
                                    optionalData="$GFHReplyFailExceptionXML" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info','',$GFHReplyFailExceptionXML)]]></bpws:from>

                                    <bpws:to variable="FailureToWriteAlertLogOnReplyFail_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="FailureToWriteAlertLogOnReplyFail_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment/>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:sequence>
                                    </bpws:else>
                                    </bpws:if>
                                </bpws:sequence>
                            </bpws:catchAll>
                        </bpws:faultHandlers>
                        <bpws:extensionActivity>
                            <soae-ab:ReplyBuilder addAttachments="false"
                                compression="identity"
                                destinationVariable=""
                                messageBodyFrom=""
                                name="ReplyAtGlobalFault"
                                passThroughEnabled="false"
                                rawEnvelopeFrom=""
                                sendRawEnvelope="false" throwFault="false">
                                <soae-ab:outboundPolicies/>
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:reply
                                    operation="ReceiveOperation"
                                    partnerLink="Receive" portType="ns47:ReceiveServicePortType"/>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:ReplyBuilder>
                        </bpws:extensionActivity>
                    </bpws:scope>
                </bpws:if>
                <bpws:extensionActivity>
                    <soae-ab:TransactionLog clusterName="false"
                        destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                        destinationTypeKind="TYPE"
                        destinationVariable="GlobalFaultExceptionLog"
                        logLevel="info" name="GlobalFaultExceptionLog"
                        nodeName="false"
                        optionalData="$XMLforGlobalException" transactionID="false">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Exception Occurred. Details follow:',';'),$XMLforGlobalException)]]></bpws:from>
                                    <bpws:to variable="GlobalFaultExceptionLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="GlobalFaultExceptionLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                </bpws:if>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:comment>Exception Occurred. Details follow:</soae-ab:comment>
                    </soae-ab:TransactionLog>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:TransactionLog clusterName="false"
                        destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                        destinationTypeKind="TYPE"
                        destinationVariable="GlobalFaultTALog"
                        logLevel="info" name="GlobalFaultTALog"
                        nodeName="false"
                        optionalData="$TransactionActivityXML" transactionID="false">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Transaction Activity log follows:',';'),$TransactionActivityXML)]]></bpws:from>
                                    <bpws:to variable="GlobalFaultTALog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="GlobalFaultTALog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                </bpws:if>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:comment>Transaction Activity log follows:</soae-ab:comment>
                    </soae-ab:TransactionLog>
                </bpws:extensionActivity>
                <bpws:exit name="ExitAtGlobalFault"/>
            </bpws:sequence>
        </bpws:catchAll>
    </bpws:faultHandlers>
    <bpws:sequence name="Sequence">
        <bpws:extensionActivity>
            <soae-ab:ReceiveBuilder allowCrossAppInvocation="false"
                allowLocalInvocation="false" bindingType="Plain"
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE" destinationVariable="Receive"
                dontExtractMsgToVar="false"
                endpointConfigurationType="Configured"
                imaKey="Receive_IMA_Key" inboundPoliciesGroup=""
                maxConcurrentRequests="0" maxRequestRate="0"
                multipartInboundData="false"
                multipartOutboundData="false" name="Receive"
                partnerLink="Receive" receiveRawEnvelope="false" temporalScope="NONE">
                <soae-ab:inputData binary="true" empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                <soae-ab:outputData binary="false" oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                <soae-ab:sftpTransport
                    serviceURI="sftp://intconnect.radian.biz:22/origination/edirequests/?type=delete&amp;scheduler=Scheduler1&amp;filePattern=RDN_*.*" soapAction=""/>
                <soae-ab:wsdlEndpointConfig defaultFlags="0"
                    inputMsg="ReceiveInput" inputMsgPart="body"
                    operation="ReceiveOperation"
                    outputMsg="ReceiveOutput" outputMsgPart="body"
                    port="ReceivePort"
                    service="{http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Receive}ReceiveService"
                    soapVersion="1.1"
                    tns="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Receive" wsdlFileName="/Origination/bin/EDIOriginationProcess/Receive.wsdl"/>
                <soae-ab:inboundPolicies/>
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:receive createInstance="yes"
                            operation="ReceiveOperation"
                            partnerLink="Receive"
                            portType="ns47:ReceiveServicePortType"
                            soae-bpel:ima-key="Receive_IMA_Key" variable="Receive"/>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:ReceiveBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:GetMessageMetadata
                destinationType="{http://www.intel.com/soae/protocolMetadata-2007a.xsd}sftpMessage"
                destinationTypeKind="ELEMENT"
                destinationVariable="GetMessageMetadata"
                message="Receive" metadata="ProtocolMetadata" name="GetMessageMetadata">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-xf:get-message-metadata($Receive_IMA_Key)/md:sftpMessage]]></bpws:from>
                                <bpws:to variable="GetMessageMetadata"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:GetMessageMetadata>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="StartTime"
                expression="xpath:{soae-xf:get-time()}"
                keepSrcElementName="false" name="StartTime" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-xf:get-time()]]></bpws:from>
                                <bpws:to variable="StartTime"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="ErrorLogPath"
                expression="xpath:{'/opt/apps/zion/transactionlogs/'}"
                keepSrcElementName="false" name="ErrorLogPath" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA['/opt/apps/zion/transactionlogs/']]></bpws:from>
                                <bpws:to variable="ErrorLogPath"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="TALogPath"
                expression="xpath:{'/opt/apps/zion/logs/'}"
                keepSrcElementName="false" name="TALogPath" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA['/opt/apps/zion/logs/']]></bpws:from>
                                <bpws:to variable="TALogPath"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}string"
                destinationTypeKind="TYPE"
                destinationVariable="SetGlobalErrorToOne"
                expression="xpath:{soae-cache:new-string('msg:GlobalError','01')}"
                keepSrcElementName="false" name="SetGlobalErrorToOne" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-cache:new-string('msg:GlobalError','01')]]></bpws:from>
                                <bpws:to variable="SetGlobalErrorToOne"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="TransactionUUID"
                expression="xpath:{soae-xf:get-UUID()}"
                keepSrcElementName="false" name="TransactionUUID" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-xf:get-UUID()]]></bpws:from>
                                <bpws:to variable="TransactionUUID"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="FileName"
                expression="xpath:{translate($GetMessageMetadata/md:transport/md:file/md:name/text(),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')}"
                keepSrcElementName="false" name="FileName" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[translate($GetMessageMetadata/md:transport/md:file/md:name/text(),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')]]></bpws:from>
                                <bpws:to variable="FileName"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="RecordCount" expression="xpath:{1}"
                keepSrcElementName="false" name="RecordCount" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[1]]></bpws:from>
                                <bpws:to variable="RecordCount"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:XMLBuilder
                destinationType="{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}LoadConfig"
                destinationTypeKind="ELEMENT"
                destinationVariable="XMLforLoadingConfigs" name="XMLforLoadingConfigs">
                <soae-ab:explicitImports>
                    <soae-ab:documentImport
                        kind="http://www.w3.org/2001/XMLSchema"
                        location="xsd/LoadConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/LoadConfig"/>
                </soae-ab:explicitImports>
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from>
                                    <bpws:literal xml:space="preserve"><ns21:LoadConfig>
                        <ns21:Load>LOAD</ns21:Load>

                    </ns21:LoadConfig>
</bpws:literal>
                                </bpws:from>
                                <bpws:to variable="XMLforLoadingConfigs"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
                <soae-ab:data>
                    <ns21:LoadConfig xmlns:ns21="http://www.radian.biz/ClientConnectivity/zion/LoadConfig">
                        <ns21:Load>LOAD</ns21:Load>
                    </ns21:LoadConfig>
                </soae-ab:data>
                <soae-ab:data2>
                    <xmlEditorNode created="true" form="unqualified"
                        index="0" nodeType="document" qname="{#document}#document">
                        <children>
                            <xmlEditorNode created="true"
                                form="qualified" index="0"
                                nodeType="element"
                                qname="{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}LoadConfig"
                                replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}LoadConfig" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}LoadConfig">
                                <children>
                                    <xmlEditorNode created="true"
                                    form="qualified" index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}Load"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}LoadConfig/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/LoadConfig}LoadConfig/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <value>LOAD</value>
                                    <attributes>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                </children>
                                <attributes>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                </attributes>
                            </xmlEditorNode>
                        </children>
                    </xmlEditorNode>
                </soae-ab:data2>
                <soae-ab:variables/>
            </soae-ab:XMLBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:XMLBuilder
                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                destinationTypeKind="ELEMENT"
                destinationVariable="TransactionActivityXML" name="TransactionActivityXML">
                <soae-ab:explicitImports>
                    <soae-ab:documentImport
                        kind="http://www.w3.org/2001/XMLSchema"
                        location="xsd/TransactionActivity.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity"/>
                </soae-ab:explicitImports>
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from>
                                    <bpws:literal xml:space="preserve"><ns31:TRANSACTIONACTIVITY>
                        <ns31:HEADER>
                            <ns31:TransId>xpath:{soae-xf:get-transaction-id()}</ns31:TransId>

                            <ns31:NodeName>xpath:{soae-xf:get-node-name()}</ns31:NodeName>

                            <ns31:SourceApplicationName>xpath:{'ZION-Origination'}</ns31:SourceApplicationName>

                            <ns31:SourceFileIdentifier>xpath:{$TransactionUUID}</ns31:SourceFileIdentifier>

                            <ns31:BatchIdentifier>xpath:{$TransactionUUID}</ns31:BatchIdentifier>

                            <ns31:CertificateIdentifier>xpath:{'NA'}</ns31:CertificateIdentifier>

                            <ns31:SourceFileName>xpath:{$FileName}</ns31:SourceFileName>

                            <ns31:TotalRecordCount>xpath:{1}</ns31:TotalRecordCount>

                            <ns31:TotalMessageCount>xpath:{1}</ns31:TotalMessageCount>

                            <ns31:TotalTransTimeInSecs>xpath:{0}</ns31:TotalTransTimeInSecs>

                            <ns31:Status>xpath:{'SUCCESS'}</ns31:Status>

                        </ns31:HEADER>

                    </ns31:TRANSACTIONACTIVITY>
</bpws:literal>
                                </bpws:from>
                                <bpws:to variable="TransactionActivityXML"/>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA['ZION-Origination']]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceApplicationName[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[1]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalRecordCount[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[$TransactionUUID]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceFileIdentifier[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[$FileName]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceFileName[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[1]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalMessageCount[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-xf:get-node-name()]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:NodeName[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA['NA']]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:CertificateIdentifier[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[$TransactionUUID]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:BatchIdentifier[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-xf:get-transaction-id()]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TransId[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA['SUCCESS']]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:Status[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                            <bpws:copy>
                                <bpws:from><![CDATA[0]]></bpws:from>
                                <bpws:to variable="TransactionActivityXML">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalTransTimeInSecs[1]/text()[1]]]></bpws:query>
                                </bpws:to>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
                <soae-ab:data>
                    <ns31:TRANSACTIONACTIVITY xmlns:ns31="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity">
                        <ns31:HEADER>
                            <ns31:TransId>xpath:{soae-xf:get-transaction-id()}</ns31:TransId>
                            <ns31:NodeName>xpath:{soae-xf:get-node-name()}</ns31:NodeName>
                            <ns31:SourceApplicationName>xpath:{'ZION-Origination'}</ns31:SourceApplicationName>
                            <ns31:SourceFileIdentifier>xpath:{$TransactionUUID}</ns31:SourceFileIdentifier>
                            <ns31:BatchIdentifier>xpath:{$TransactionUUID}</ns31:BatchIdentifier>
                            <ns31:CertificateIdentifier>xpath:{'NA'}</ns31:CertificateIdentifier>
                            <ns31:SourceFileName>xpath:{$FileName}</ns31:SourceFileName>
                            <ns31:TotalRecordCount>xpath:{1}</ns31:TotalRecordCount>
                            <ns31:TotalMessageCount>xpath:{1}</ns31:TotalMessageCount>
                            <ns31:TotalTransTimeInSecs>xpath:{0}</ns31:TotalTransTimeInSecs>
                            <ns31:Status>xpath:{'SUCCESS'}</ns31:Status>
                        </ns31:HEADER>
                    </ns31:TRANSACTIONACTIVITY>
                </soae-ab:data>
                <soae-ab:data2>
                    <xmlEditorNode created="true" form="unqualified"
                        index="0" nodeType="document" qname="{#document}#document">
                        <children>
                            <xmlEditorNode created="true"
                                form="qualified" index="0"
                                nodeType="element"
                                qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY">
                                <children>
                                    <xmlEditorNode created="true"
                                    form="qualified" index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.0/@element">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TransId"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{soae-xf:get-transaction-id()}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}NodeName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{soae-xf:get-node-name()}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceApplicationName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.2" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'ZION-Origination'}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceFileIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.3" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{$TransactionUUID}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}BatchIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.4" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.4/@element">
                                    <value>xpath:{$TransactionUUID}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}CertificateIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.5" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.5/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceFileName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.6" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.6/@element">
                                    <value>xpath:{$FileName}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalRecordCount"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.7" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.7/@element">
                                    <value>xpath:{1}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalMessageCount"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.8" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.8/@element">
                                    <value>xpath:{1}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalTransTimeInSecs"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.9" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.9/@element">
                                    <value>xpath:{0}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Status"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.10" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.10/@element">
                                    <value>xpath:{'SUCCESS'}</value>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.11"/>
                                    </children>
                                    <attributes>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    <xmlEditorNode created="false"
                                    form="qualified" index="0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.1"/>
                                </children>
                                <attributes>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                </attributes>
                            </xmlEditorNode>
                        </children>
                    </xmlEditorNode>
                </soae-ab:data2>
                <soae-ab:variables/>
            </soae-ab:XMLBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:XMLBuilder
                destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                destinationTypeKind="ELEMENT"
                destinationVariable="XMLforGlobalException" name="XMLforGlobalException">
                <soae-ab:explicitImports>
                    <soae-ab:documentImport
                        kind="http://www.w3.org/2001/XMLSchema"
                        location="xsd/ExceptionConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"/>
                </soae-ab:explicitImports>
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from>
                                    <bpws:literal xml:space="preserve"><ns22:EXCEPTIONS/>

</bpws:literal>
                                </bpws:from>
                                <bpws:to variable="XMLforGlobalException"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
                <soae-ab:data>
                    <ns22:EXCEPTIONS xmlns:ns22="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"/>
                </soae-ab:data>
                <soae-ab:data2>
                    <xmlEditorNode created="true" form="unqualified"
                        index="0" nodeType="document" qname="{#document}#document">
                        <children>
                            <xmlEditorNode created="true"
                                form="qualified" index="0"
                                nodeType="element"
                                qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS">
                                <children>
                                    <xmlEditorNode created="false"
                                    form="qualified" index="0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0"/>
                                </children>
                                <attributes>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                </attributes>
                            </xmlEditorNode>
                        </children>
                    </xmlEditorNode>
                </soae-ab:data2>
                <soae-ab:variables/>
            </soae-ab:XMLBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="ProviderID"
                expression="xpath:{translate(substring($GetMessageMetadata/md:transport/md:file/md:name,5,2),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')}"
                keepSrcElementName="false" name="ProviderID" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[translate(substring($GetMessageMetadata/md:transport/md:file/md:name,5,2),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')]]></bpws:from>
                                <bpws:to variable="ProviderID"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="ProviderName"
                expression="xpath:{'NA'}" keepSrcElementName="false"
                name="ProviderName" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA['NA']]></bpws:from>
                                <bpws:to variable="ProviderName"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}int"
                destinationTypeKind="TYPE"
                destinationVariable="RequestCount"
                expression="xpath:{0}" keepSrcElementName="false"
                name="RequestCount" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[0]]></bpws:from>
                                <bpws:to variable="RequestCount"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="BatchActivity"
                expression="xpath:{0}" keepSrcElementName="false"
                name="BatchActivity" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[0]]></bpws:from>
                                <bpws:to variable="BatchActivity"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="ResponseFlag"
                expression="xpath:{'false'}" keepSrcElementName="false"
                name="ResponseFlag" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA['false']]></bpws:from>
                                <bpws:to variable="ResponseFlag"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="FileType" expression="xpath:{'NA'}"
                keepSrcElementName="false" name="FileType" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA['NA']]></bpws:from>
                                <bpws:to variable="FileType"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="MessageTransactionUUID"
                expression="xpath:{''}" keepSrcElementName="false"
                name="MessageTransactionUUID" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA['']]></bpws:from>
                                <bpws:to variable="MessageTransactionUUID"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:scope exitOnStandardFault="no" name="ScopeLoadSystemConfigurationFiles">
            <bpws:sequence name="Sequence2">
                <bpws:scope exitOnStandardFault="no" name="ScopeLoadExceptionConfigXSL">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrorToTwoloadExceptionLogFailed"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','02')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrorToTwoloadExceptionLogFailed" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','02')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrorToTwoloadExceptionLogFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:XMLBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="CreateErrorLogXMLonExceptionXSlLoadFailure" name="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <soae-ab:explicitImports>
                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/ExceptionConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig"/>
                                    </soae-ab:explicitImports>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><ns22:EXCEPTIONS>
                                    <ns22:EXCEPTION>
                                    <ns22:RequestUUID>xpath:{$TransactionUUID}</ns22:RequestUUID>

                                    <ns22:TransactionID>xpath:{soae-xf:get-transaction-id()}</ns22:TransactionID>

                                    <ns22:CertificateNumber>xpath:{'NA'}</ns22:CertificateNumber>

                                    <ns22:DateTimeStamp>xpath:{soae-xf:get-time()}</ns22:DateTimeStamp>

                                    <ns22:ApplicationName>xpath:{'ZION-Origination'}</ns22:ApplicationName>

                                    <ns22:ExceptionCode>xpath:{'5012'}</ns22:ExceptionCode>

                                    <ns22:ExceptionName>xpath:{'LoadExceptionLogXSLFailed'}</ns22:ExceptionName>

                                    <ns22:Description>xpath:{'Failed to load Exception log creation style sheet'}</ns22:Description>

                                    <ns22:LogLevel>xpath:{'ERROR'}</ns22:LogLevel>

                                    <ns22:Priority>xpath:{'P1'}</ns22:Priority>

                                    <ns22:Severity>xpath:{'CRITICAL'}</ns22:Severity>

                                    <ns22:AdditionalInfo>xpath:{'EDIOriginationProcess - NA'}</ns22:AdditionalInfo>

                                    <ns22:ProviderName>xpath:{$ProviderName}</ns22:ProviderName>

                                    <ns22:ResponseName>xpath:{'Communication Failure'}</ns22:ResponseName>

                                    <ns22:ResponseCondition>xpath:{'Error'}</ns22:ResponseCondition>

                                    <ns22:ResponseCode>xpath:{'6001'}</ns22:ResponseCode>

                                    <ns22:ResponseDescription>xpath:{'System not available'}</ns22:ResponseDescription>

                                    <ns22:IncomingFileName>xpath:{$FileName}</ns22:IncomingFileName>

                                    </ns22:EXCEPTION>

                                    </ns22:EXCEPTIONS>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-time()]]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:DateTimeStamp[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['P1']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Priority[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['LoadExceptionLogXSLFailed']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ExceptionName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$FileName]]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:IncomingFileName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionUUID]]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:RequestUUID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['5012']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ExceptionCode[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:CertificateNumber[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Failed to load Exception log creation style sheet']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Description[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ERROR']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:LogLevel[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-transaction-id()]]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:TransactionID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ZION-Origination']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ApplicationName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Communication Failure']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['EDIOriginationProcess - NA']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:AdditionalInfo[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Error']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseCondition[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['System not available']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseDescription[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ProviderName]]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ProviderName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['CRITICAL']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:Severity[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['6001']]></bpws:from>
                                    <bpws:to variable="CreateErrorLogXMLonExceptionXSlLoadFailure">
                                    <bpws:query><![CDATA[/ns22:EXCEPTIONS[1]/ns22:EXCEPTION[1]/ns22:ResponseCode[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:data>
                                    <ns22:EXCEPTIONS xmlns:ns22="http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig">
                                    <ns22:EXCEPTION>
                                    <ns22:RequestUUID>xpath:{$TransactionUUID}</ns22:RequestUUID>
                                    <ns22:TransactionID>xpath:{soae-xf:get-transaction-id()}</ns22:TransactionID>
                                    <ns22:CertificateNumber>xpath:{'NA'}</ns22:CertificateNumber>
                                    <ns22:DateTimeStamp>xpath:{soae-xf:get-time()}</ns22:DateTimeStamp>
                                    <ns22:ApplicationName>xpath:{'ZION-Origination'}</ns22:ApplicationName>
                                    <ns22:ExceptionCode>xpath:{'5012'}</ns22:ExceptionCode>
                                    <ns22:ExceptionName>xpath:{'LoadExceptionLogXSLFailed'}</ns22:ExceptionName>
                                    <ns22:Description>xpath:{'Failed to load Exception log creation style sheet'}</ns22:Description>
                                    <ns22:LogLevel>xpath:{'ERROR'}</ns22:LogLevel>
                                    <ns22:Priority>xpath:{'P1'}</ns22:Priority>
                                    <ns22:Severity>xpath:{'CRITICAL'}</ns22:Severity>
                                    <ns22:AdditionalInfo>xpath:{'EDIOriginationProcess - NA'}</ns22:AdditionalInfo>
                                    <ns22:ProviderName>xpath:{$ProviderName}</ns22:ProviderName>
                                    <ns22:ResponseName>xpath:{'Communication Failure'}</ns22:ResponseName>
                                    <ns22:ResponseCondition>xpath:{'Error'}</ns22:ResponseCondition>
                                    <ns22:ResponseCode>xpath:{'6001'}</ns22:ResponseCode>
                                    <ns22:ResponseDescription>xpath:{'System not available'}</ns22:ResponseDescription>
                                    <ns22:IncomingFileName>xpath:{$FileName}</ns22:IncomingFileName>
                                    </ns22:EXCEPTION>
                                    </ns22:EXCEPTIONS>
                                    </soae-ab:data>
                                    <soae-ab:data2>
                                    <xmlEditorNode
                                    created="true"
                                    form="unqualified"
                                    index="0"
                                    nodeType="document" qname="{#document}#document">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTION"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}RequestUUID"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.0" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{$TransactionUUID}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}TransactionID"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.1" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{soae-xf:get-transaction-id()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}CertificateNumber"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.2" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}DateTimeStamp"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.3" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{soae-xf:get-time()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ApplicationName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.4" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.4/@element">
                                    <value>xpath:{'ZION-Origination'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ExceptionCode"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.5" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.5/@element">
                                    <value>xpath:{'5012'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ExceptionName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.6" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.6/@element">
                                    <value>xpath:{'LoadExceptionLogXSLFailed'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Description"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.7" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.7/@element">
                                    <value>xpath:{'Failed to load Exception log creation style sheet'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}LogLevel"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.8" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.8/@element">
                                    <value>xpath:{'ERROR'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Priority"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.9" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.9/@element">
                                    <value>xpath:{'P1'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}Severity"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.10" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.10/@element">
                                    <value>xpath:{'CRITICAL'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}AdditionalInfo"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.11" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.11/@element">
                                    <value>xpath:{'EDIOriginationProcess - NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ProviderName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.12" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.12/@element">
                                    <value>xpath:{$ProviderName}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.13" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.13/@element">
                                    <value>xpath:{'Communication Failure'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseCondition"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.14" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.14/@element">
                                    <value>xpath:{'Error'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseCode"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.15" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.15/@element">
                                    <value>xpath:{'6001'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}ResponseDescription"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.16" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.16/@element">
                                    <value>xpath:{'System not available'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}IncomingFileName"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.17" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0/@element/@typeDefinition/@particle/@modelGroup/@particle.17/@element">
                                    <value>xpath:{$FileName}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="1" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS/@typeDefinition/@particle/@modelGroup/@particle.0"/>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    </xmlEditorNode>
                                    </soae-ab:data2>
                                    <soae-ab:variables/>
                                    </soae-ab:XMLBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$CreateErrorLogXMLonExceptionXSlLoadFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateExceptionXSLLoadFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$CreateErrorLogXMLonExceptionXSlLoadFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:XMLBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TAExceptionlogLoadFailure" name="TAExceptionlogLoadFailure">
                                    <soae-ab:explicitImports>
                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/TransactionActivity.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity"/>
                                    </soae-ab:explicitImports>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><ns31:TRANSACTIONACTIVITY>
                                    <ns31:HEADER>
                                    <ns31:TransId>xpath:{soae-xf:get-transaction-id()}</ns31:TransId>

                                    <ns31:NodeName>xpath:{soae-xf:get-node-name()}</ns31:NodeName>

                                    <ns31:SourceApplicationName>xpath:{'ZION-Origination'}</ns31:SourceApplicationName>

                                    <ns31:SourceFileIdentifier>xpath:{$TransactionUUID}</ns31:SourceFileIdentifier>

                                    <ns31:BatchIdentifier>xpath:{'NA'}</ns31:BatchIdentifier>

                                    <ns31:CertificateIdentifier>xpath:{'NA'}</ns31:CertificateIdentifier>

                                    <ns31:SourceFileName>xpath:{$FileName}</ns31:SourceFileName>

                                    <ns31:TotalRecordCount>xpath:{1}</ns31:TotalRecordCount>

                                    <ns31:TotalMessageCount>xpath:{1}</ns31:TotalMessageCount>

                                    <ns31:TotalTransTimeInSecs>xpath:{0}</ns31:TotalTransTimeInSecs>

                                    <ns31:Status>xpath:{'SUCCESS'}</ns31:Status>

                                    </ns31:HEADER>

                                    <ns31:ACTIVITIES>
                                    <ns31:ACTIVITY>
                                    <ns31:DateTime>xpath:{soae-xf:get-time()}</ns31:DateTime>

                                    <ns31:Code>xpath:{'5012'}</ns31:Code>

                                    <ns31:Description>xpath:{'Failed to load CreateExceptionLog style sheet'}</ns31:Description>

                                    <ns31:MessageID>xpath:{'NA'}</ns31:MessageID>

                                    </ns31:ACTIVITY>

                                    </ns31:ACTIVITIES>

                                    </ns31:TRANSACTIONACTIVITY>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['ZION-Origination']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceApplicationName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionUUID]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceFileIdentifier[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[1]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalMessageCount[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:CertificateIdentifier[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['SUCCESS']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:Status[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[0]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalTransTimeInSecs[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[1]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TotalRecordCount[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['5012']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:Code[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$FileName]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:SourceFileName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:MessageID[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-node-name()]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:NodeName[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['Failed to load CreateExceptionLog style sheet']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:Description[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-transaction-id()]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:TransId[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA['NA']]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:HEADER[1]/ns31:BatchIdentifier[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-time()]]></bpws:from>
                                    <bpws:to variable="TAExceptionlogLoadFailure">
                                    <bpws:query><![CDATA[/ns31:TRANSACTIONACTIVITY[1]/ns31:ACTIVITIES[1]/ns31:ACTIVITY[1]/ns31:DateTime[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:data>
                                    <ns31:TRANSACTIONACTIVITY xmlns:ns31="http://www.radian.biz/ClientConnectivity/zion/TransactionActivity">
                                    <ns31:HEADER>
                                    <ns31:TransId>xpath:{soae-xf:get-transaction-id()}</ns31:TransId>
                                    <ns31:NodeName>xpath:{soae-xf:get-node-name()}</ns31:NodeName>
                                    <ns31:SourceApplicationName>xpath:{'ZION-Origination'}</ns31:SourceApplicationName>
                                    <ns31:SourceFileIdentifier>xpath:{$TransactionUUID}</ns31:SourceFileIdentifier>
                                    <ns31:BatchIdentifier>xpath:{'NA'}</ns31:BatchIdentifier>
                                    <ns31:CertificateIdentifier>xpath:{'NA'}</ns31:CertificateIdentifier>
                                    <ns31:SourceFileName>xpath:{$FileName}</ns31:SourceFileName>
                                    <ns31:TotalRecordCount>xpath:{1}</ns31:TotalRecordCount>
                                    <ns31:TotalMessageCount>xpath:{1}</ns31:TotalMessageCount>
                                    <ns31:TotalTransTimeInSecs>xpath:{0}</ns31:TotalTransTimeInSecs>
                                    <ns31:Status>xpath:{'SUCCESS'}</ns31:Status>
                                    </ns31:HEADER>
                                    <ns31:ACTIVITIES>
                                    <ns31:ACTIVITY>
                                    <ns31:DateTime>xpath:{soae-xf:get-time()}</ns31:DateTime>
                                    <ns31:Code>xpath:{'5012'}</ns31:Code>
                                    <ns31:Description>xpath:{'Failed to load CreateExceptionLog style sheet'}</ns31:Description>
                                    <ns31:MessageID>xpath:{'NA'}</ns31:MessageID>
                                    </ns31:ACTIVITY>
                                    </ns31:ACTIVITIES>
                                    </ns31:TRANSACTIONACTIVITY>
                                    </soae-ab:data>
                                    <soae-ab:data2>
                                    <xmlEditorNode
                                    created="true"
                                    form="unqualified"
                                    index="0"
                                    nodeType="document" qname="{#document}#document">
                                    <children>
                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    replacedComponent="element:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY" schemaComponent="element:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TransId"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{soae-xf:get-transaction-id()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}NodeName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{soae-xf:get-node-name()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceApplicationName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.2" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'ZION-Origination'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceFileIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.3" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{$TransactionUUID}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}BatchIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.4" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.4/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}CertificateIdentifier"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.5" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.5/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}SourceFileName"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.6" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.6/@element">
                                    <value>xpath:{$FileName}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalRecordCount"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.7" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.7/@element">
                                    <value>xpath:{1}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalMessageCount"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.8" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.8/@element">
                                    <value>xpath:{1}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TotalTransTimeInSecs"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.9" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.9/@element">
                                    <value>xpath:{0}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Status"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.10" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.10/@element">
                                    <value>xpath:{'SUCCESS'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}HEADER/@particle/@modelGroup/@particle.11"/>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY/@particle/@modelGroup/@particle.1/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES/@particle/@modelGroup/@particle.0/@element">
                                    <children>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}DateTime"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.0" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.0/@element">
                                    <value>xpath:{soae-xf:get-time()}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Code"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.1/@element">
                                    <value>xpath:{'5012'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}Description"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.2" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.2/@element">
                                    <value>xpath:{'Failed to load CreateExceptionLog style sheet'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="true"
                                    form="qualified"
                                    index="0"
                                    nodeType="element"
                                    qname="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}MessageID"
                                    replacedComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.3" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITY/@particle/@modelGroup/@particle.3/@element">
                                    <value>xpath:{'NA'}</value>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="Status"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>

                                    <xmlEditorNode
                                    created="false"
                                    form="qualified"
                                    index="1" schemaComponent="type-definition:{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}ACTIVITIES/@particle/@modelGroup/@particle.0"/>
                                    </children>
                                    <attributes>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>

                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    <attributes>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}nil"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}type"/>
                                    <attribute
                                    empty="true"
                                    form="qualified" name="{http://www.w3.org/2001/XMLSchema-instance}schemaLocation"/>
                                    </attributes>
                                    </xmlEditorNode>
                                    </children>
                                    </xmlEditorNode>
                                    </soae-ab:data2>
                                    <soae-ab:variables/>
                                    </soae-ab:XMLBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAExceptionlogLoadFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateTAExceptionlogLoadFailure" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAExceptionlogLoadFailure]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:rethrow/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:extensionActivity>
                        <soae-ab:XSLTransform
                            destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                            destinationTypeKind="TYPE"
                            destinationVariable="LoadExceptionConfigXSL"
                            from="$XMLforLoadingConfigs"
                            name="LoadExceptionConfigXSL"
                            stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                            <bpws:scope>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforLoadingConfigs)]]></bpws:from>
                                    <bpws:to variable="LoadExceptionConfigXSL"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                </bpws:sequence>
                            </bpws:scope>
                            <soae-ab:params>
                                <soae-ab:param name="FirstBatch" value=""/>
                                <soae-ab:param name="DtTimeStamp" value=""/>
                                <soae-ab:param name="RequestUUID" value=""/>
                                <soae-ab:param name="TransactionID" value=""/>
                                <soae-ab:param name="CertificateNumber" value=""/>
                                <soae-ab:param name="ApplicationName" value=""/>
                                <soae-ab:param name="ExceptionCode" value=""/>
                                <soae-ab:param name="ExceptionName" value=""/>
                                <soae-ab:param name="Description" value=""/>
                                <soae-ab:param name="Loglevel" value=""/>
                                <soae-ab:param name="Severity" value=""/>
                                <soae-ab:param name="Priority" value=""/>
                                <soae-ab:param name="AdditionalInfo" value=""/>
                                <soae-ab:param name="ProviderName" value=""/>
                                <soae-ab:param name="ResponseName" value=""/>
                                <soae-ab:param name="ResponseCondition" value=""/>
                                <soae-ab:param name="ResponseCode" value=""/>
                                <soae-ab:param
                                    name="ResponseDescription" value=""/>
                                <soae-ab:param name="IncomingFileName" value=""/>
                            </soae-ab:params>
                        </soae-ab:XSLTransform>
                    </bpws:extensionActivity>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeLoadCreateActivityNodeXSLT">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="LoadCreateActivityXSLfailure"
                                    from="$XMLforGlobalException"
                                    name="LoadCreateActivityXSLfailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','2001','ExceptionName','LoadCreateActivityNodeXSLFailed','Description','Failed to load CreateActivityNode style sheet','Loglevel','WARNING','Severity','WARNING','Priority','P4','AdditionalInfo','EDIOriginationProcess - N/A','ProviderName',$ProviderName,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="LoadCreateActivityXSLfailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'2001'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="'LoadCreateActivityNodeXSLFailed'"/>
                                    <soae-ab:param
                                    name="Description" value="'Failed to load CreateActivityNode style sheet'"/>
                                    <soae-ab:param
                                    name="Loglevel" value="'WARNING'"/>
                                    <soae-ab:param
                                    name="Severity" value="'WARNING'"/>
                                    <soae-ab:param
                                    name="Priority" value="'P4'"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="'EDIOriginationProcess - N/A'"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value=""/>
                                    <soae-ab:param
                                    name="ResponseCondition" value=""/>
                                    <soae-ab:param
                                    name="ResponseCode" value=""/>
                                    <soae-ab:param
                                    name="ResponseDescription" value=""/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$LoadCreateActivityXSLfailure}"
                                    keepSrcElementName="false"
                                    name="UpdateLoadCreateActivityXSLfailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$LoadCreateActivityXSLfailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:scope exitOnStandardFault="no" name="ScopeWriteLoadCreateActivityNodeXSLFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>

                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="WriteLoadCreateActivityNodeXSLFailed_ZIONLog"
                                    logLevel="info"
                                    name="WriteLoadCreateActivityNodeXSLFailed_ZIONLog"
                                    nodeName="false"
                                    optionalData="$TransactionActivityXML" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info','',$TransactionActivityXML)]]></bpws:from>

                                    <bpws:to variable="WriteLoadCreateActivityNodeXSLFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="WriteLoadCreateActivityNodeXSLFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment/>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:extensionActivity>
                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/OriginationService/http/bin/OriginationAsynchronousPostBack/Invoke}InvokeOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="WriteAsyncLoadCreateActivityNodeXSLFailed"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat(&quot;file:///opt/apps/zion/logs/&quot;,&quot;RDN_&quot;,soae-xf:get-node-name(),'_',$TransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')"
                                    endpointConfigurationType="Configured"
                                    imaKey="WriteAsyncLoadCreateActivityNodeXSLFailed_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="WriteAsyncLoadCreateActivityNodeXSLFailed"
                                    partnerLink="WriteAsyncLoadCreateActivityNodeXSLFailed"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="soae-xf:encode-binary-string('utf-8','base64',concat(exslt:format-date('now-local','MMM dd HH:mm:ss.SSS'),'|',soae-xf:get-node-name(),'|',$XMLforGlobalException/ns22:EXCEPTION/ns22:ApplicationName/text(),'|',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode/text(),'|',$XMLforGlobalException/ns22:EXCEPTION/ns22:Priority/text(),'|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:IncomingFileName/text(),'|Source File UUID: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:ProviderName/text(),'|AddlInfo: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:AdditionalInfo/text())) "/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData
                                    binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData
                                    binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="WriteAsyncLoadCreateActivityNodeXSLFailedInput"
                                    inputMsgPart="body"
                                    operation="WriteAsyncLoadCreateActivityNodeXSLFailedOperation"
                                    outputMsg="WriteAsyncLoadCreateActivityNodeXSLFailedOutput"
                                    outputMsgPart="body"
                                    port="WriteAsyncLoadCreateActivityNodeXSLFailedPort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAsyncLoadCreateActivityNodeXSLFailed}WriteAsyncLoadCreateActivityNodeXSLFailedService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteAsyncLoadCreateActivityNodeXSLFailed" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteAsyncLoadCreateActivityNodeXSLFailed.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns0:WriteAsyncLoadCreateActivityNodeXSLFailedInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteAsyncLoadCreateActivityNodeXSLFailed_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:encode-binary-string('utf-8','base64',concat(exslt:format-date('now-local','MMM dd HH:mm:ss.SSS'),'|',soae-xf:get-node-name(),'|',$XMLforGlobalException/ns22:EXCEPTION/ns22:ApplicationName/text(),'|',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode/text(),'|',$XMLforGlobalException/ns22:EXCEPTION/ns22:Priority/text(),'|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:IncomingFileName/text(),'|Source File UUID: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:ProviderName/text(),'|AddlInfo: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:AdditionalInfo/text())) ]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat("file:///opt/apps/zion/logs/","RDN_",soae-xf:get-node-name(),'_',$TransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("file:///opt/apps/zion/logs/","RDN_",soae-xf:get-node-name(),'_',$TransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="WriteAsyncLoadCreateActivityNodeXSLFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteAsyncLoadCreateActivityNodeXSLFailedOperation"
                                    partnerLink="WriteAsyncLoadCreateActivityNodeXSLFailed"
                                    portType="ns0:WriteAsyncLoadCreateActivityNodeXSLFailedServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                    </bpws:extensionActivity>
                                </bpws:scope>
                                <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="true"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="LoadCreateActivityNodeFailed_ZIONLog"
                                    logLevel="info"
                                    name="LoadCreateActivityNodeFailed_ZIONLog"
                                    nodeName="true" optionalData="" transactionID="true">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Transaction ID: ',soae-xf:get-transaction-id(),'; Node name: ',soae-xf:get-node-name(),'; Cluster name: ',soae-xf:get-cluster-name(),'; Comment: ','LoadCreateActivityNode failed',';'))]]></bpws:from>

                                    <bpws:to variable="LoadCreateActivityNodeFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="LoadCreateActivityNodeFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>LoadCreateActivityNode failed</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence3">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="LoadCreateActivityNode"
                                from="$TransactionActivityXML"
                                name="LoadCreateActivityNode"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier','NA','RecordCount','NA','Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1001','Description','CreateActivityNode stylesheet was successfully loaded','MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="LoadCreateActivityNode"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="'NA'"/>
                                    <soae-ab:param name="RecordCount" value="'NA'"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1001'"/>
                                    <soae-ab:param name="Description" value="'CreateActivityNode stylesheet was successfully loaded'"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$LoadCreateActivityNode}"
                                keepSrcElementName="false"
                                name="TALoadCreateActivityNodeXSLLoaded" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$LoadCreateActivityNode]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeAppConfig">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}string"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoTwo"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','02')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoTwo" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','02')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoTwo"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="AppConfigLoadFailure"
                                    from="$XMLforGlobalException"
                                    name="AppConfigLoadFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','5002','ExceptionName','LoadAppConfigXSLFailed','Description','Failed to load Application Config style sheet','Loglevel','ERROR','Severity','CRITICAL','Priority','P1','AdditionalInfo','EDIOriginationProcess - N/A','ProviderName',$ProviderName,'ResponseName','COMMUNICATION','ResponseCondition','ERROR','ResponseCode','6001','ResponseDescription','System not available','IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="AppConfigLoadFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'5002'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="'LoadAppConfigXSLFailed'"/>
                                    <soae-ab:param
                                    name="Description" value="'Failed to load Application Config style sheet'"/>
                                    <soae-ab:param
                                    name="Loglevel" value="'ERROR'"/>
                                    <soae-ab:param
                                    name="Severity" value="'CRITICAL'"/>
                                    <soae-ab:param
                                    name="Priority" value="'P1'"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="'EDIOriginationProcess - N/A'"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="'COMMUNICATION'"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="'ERROR'"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="'6001'"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="'System not available'"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$AppConfigLoadFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateAppConfigLoadFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$AppConfigLoadFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:scope exitOnStandardFault="no" name="ScopeTALoadAppConfigXSLFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTALoadAppConfigXSLFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence99">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TALoadAppConfigXSLFailed"
                                    from="$TransactionActivityXML"
                                    name="TALoadAppConfigXSLFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','5002','Description','Failed to load Application Config style sheet','MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TALoadAppConfigXSLFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'5002'"/>
                                    <soae-ab:param
                                    name="Description" value="'Failed to load Application Config style sheet'"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TALoadAppConfigXSLFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTALoadAppConfigXSLFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TALoadAppConfigXSLFailed]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:scope>
                                <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="true"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="AppConfigFailed_ZIONLog"
                                    logLevel="info"
                                    name="AppConfigFailed_ZIONLog"
                                    nodeName="true" optionalData="" transactionID="true">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Transaction ID: ',soae-xf:get-transaction-id(),'; Node name: ',soae-xf:get-node-name(),'; Cluster name: ',soae-xf:get-cluster-name(),'; Comment: ','AppConfig loading failed',';'))]]></bpws:from>

                                    <bpws:to variable="AppConfigFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="AppConfigFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>AppConfig loading failed</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                </bpws:extensionActivity>
                                <bpws:rethrow/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:extensionActivity>
                        <soae-ab:XSLTransform
                            destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/AppConfig}AppConfig"
                            destinationTypeKind="ELEMENT"
                            destinationVariable="AppConfig"
                            from="$XMLforLoadingConfigs"
                            name="AppConfig" stylesheet="AppConfig.xsl" stylesheetType="URL">
                            <soae-ab:explicitImports>
                                <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/AppConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/AppConfig"/>
                            </soae-ab:explicitImports>
                            <bpws:scope>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('AppConfig.xsl',$XMLforLoadingConfigs)]]></bpws:from>
                                    <bpws:to variable="AppConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                </bpws:sequence>
                            </bpws:scope>
                            <soae-ab:params/>
                        </soae-ab:XSLTransform>
                    </bpws:extensionActivity>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeAppConfigLoaded">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTAAppConfigLoadedFailed"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence59">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAAppConfigLoaded"
                                from="$TransactionActivityXML"
                                name="TAAppConfigLoaded"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount','NA','Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1002','Description','ApplicationConfig stylesheet was successfully loaded','MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAAppConfigLoaded"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="'NA'"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1002'"/>
                                    <soae-ab:param name="Description" value="'ApplicationConfig stylesheet was successfully loaded'"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TAAppConfigLoaded}"
                                keepSrcElementName="false"
                                name="UpdateTAAppConfigLoaded" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAAppConfigLoaded]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeStatusCodeConfig">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}string"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeStatusCodeConfig"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeStatusCodeConfig" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoThreeStatusCodeConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="StatusCodeConfigLoadfailure"
                                    from="$XMLforGlobalException"
                                    name="StatusCodeConfigLoadfailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','5003','ExceptionName','LoadStatusCodeConfigXSLFailed','Description','Failed to load StatusCodeConfig style sheet','Loglevel','ERROR','Severity','CRITICAL','Priority','P1','AdditionalInfo','EDIOriginationProcess - N/A','ProviderName',$ProviderName,'ResponseName','Communication','ResponseCondition','Error','ResponseCode','6001','ResponseDescription','System not available','IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="StatusCodeConfigLoadfailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'5003'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="'LoadStatusCodeConfigXSLFailed'"/>
                                    <soae-ab:param
                                    name="Description" value="'Failed to load StatusCodeConfig style sheet'"/>
                                    <soae-ab:param
                                    name="Loglevel" value="'ERROR'"/>
                                    <soae-ab:param
                                    name="Severity" value="'CRITICAL'"/>
                                    <soae-ab:param
                                    name="Priority" value="'P1'"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="'EDIOriginationProcess - N/A'"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="'Communication'"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="'Error'"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="'6001'"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="'System not available'"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$StatusCodeConfigLoadfailure}"
                                    keepSrcElementName="false"
                                    name="UpdateStatusCodeLoadFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$StatusCodeConfigLoadfailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:scope exitOnStandardFault="no" name="ScopeTALoadStatusCodeConfigXSLFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTALoadStatusCodeConfigXSLFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TALoadStatusCodeConfigXSLFailed"
                                    from="$TransactionActivityXML"
                                    name="TALoadStatusCodeConfigXSLFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','5003','Description','Failed to load StatusCodeConfig style sheet','MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TALoadStatusCodeConfigXSLFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'5003'"/>
                                    <soae-ab:param
                                    name="Description" value="'Failed to load StatusCodeConfig style sheet'"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TALoadStatusCodeConfigXSLFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTALoadStatusCodeConfigXSLFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TALoadStatusCodeConfigXSLFailed]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:scope>
                                <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="true"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="StatusCodeConfigXSLLoadFailed_ZIONLog"
                                    logLevel="info"
                                    name="StatusCodeConfigXSLLoadFailed_ZIONLog"
                                    nodeName="true" optionalData="" transactionID="true">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Transaction ID: ',soae-xf:get-transaction-id(),'; Node name: ',soae-xf:get-node-name(),'; Cluster name: ',soae-xf:get-cluster-name(),'; Comment: ','Status code config XSLT file load failed.',';'))]]></bpws:from>

                                    <bpws:to variable="StatusCodeConfigXSLLoadFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="StatusCodeConfigXSLLoadFailed_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Status code config XSLT file load failed.</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                </bpws:extensionActivity>
                                <bpws:rethrow/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:extensionActivity>
                        <soae-ab:XSLTransform
                            destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/StatusCodeConfig}STATUSCODES"
                            destinationTypeKind="ELEMENT"
                            destinationVariable="StatusCodeConfig"
                            from="$XMLforLoadingConfigs"
                            name="StatusCodeConfig"
                            stylesheet="StatusCodeConfig.xsl" stylesheetType="URL">
                            <soae-ab:explicitImports>
                                <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/StatusCodeConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/StatusCodeConfig"/>
                            </soae-ab:explicitImports>
                            <bpws:scope>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('StatusCodeConfig.xsl',$XMLforLoadingConfigs)]]></bpws:from>
                                    <bpws:to variable="StatusCodeConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                </bpws:sequence>
                            </bpws:scope>
                            <soae-ab:params/>
                        </soae-ab:XSLTransform>
                    </bpws:extensionActivity>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeTAStatusCodeConfig">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTAStatusCodeConfigFailed"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence60">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAStatusCodeConfig"
                                from="$TransactionActivityXML"
                                name="TAStatusCodeConfig"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1003','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1003']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAStatusCodeConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1003'"/>
                                    <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1003']/ns16:StatusDescription"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TAStatusCodeConfig}"
                                keepSrcElementName="false"
                                name="UpdateTAStatusCodeConfig" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAStatusCodeConfig]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeOnBoardingConfig">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeOnBoardingConfig"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeOnBoardingConfig" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoThreeOnBoardingConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="OnBoardingConfigLoadFailure"
                                    from="$XMLforGlobalException"
                                    name="OnBoardingConfigLoadFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','5016','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="OnBoardingConfigLoadFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'5016'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$OnBoardingConfigLoadFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateStatusCodeLoadFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$OnBoardingConfigLoadFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:scope exitOnStandardFault="no" name="ScopeTALoadOnBoardingConfigXSLFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTALoadOnBoardingConfigXSLFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TALoadOnBoardingConfigXSLFailed"
                                    from="$TransactionActivityXML"
                                    name="TALoadOnBoardingConfigXSLFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','5016','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TALoadOnBoardingConfigXSLFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'5016'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5016']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TALoadOnBoardingConfigXSLFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTALoadOnBoardingConfigXSLFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TALoadOnBoardingConfigXSLFailed]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:scope>
                                <bpws:rethrow/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence5">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/OnBoardingConfig}OnBoarding_Config"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="OnBoardingConfig"
                                from="$XMLforLoadingConfigs"
                                name="OnBoardingConfig"
                                stylesheet="OnBoardingConfig.xsl" stylesheetType="URL">
                                <soae-ab:explicitImports>
                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="xsd/OnBoardingConfig.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/Origination/OnBoardingConfig"/>
                                </soae-ab:explicitImports>
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('OnBoardingConfig.xsl',$XMLforLoadingConfigs)]]></bpws:from>
                                    <bpws:to variable="OnBoardingConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params/>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeTAOnBoardingConfig">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTAOnBoardingConfigFailed"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence60">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAOnBoardingConfig"
                                from="$TransactionActivityXML"
                                name="TAOnBoardingConfig"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1036','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1036']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAOnBoardingConfig"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1036'"/>
                                    <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1036']/ns16:StatusDescription"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TAOnBoardingConfig}"
                                keepSrcElementName="false"
                                name="UpdateTAStatusCodeConfig" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAOnBoardingConfig]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
            </bpws:sequence>
        </bpws:scope>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="FileType"
                expression="xpath:{translate(substring($FileName,(soae-xf:reverse-string-index($FileName,'.',-1)+1),string-length($FileName)),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')}"
                keepSrcElementName="false" name="UpdateFileType" xDestination="$FileType">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[translate(substring($FileName,(soae-xf:reverse-string-index($FileName,'.',-1)+1),string-length($FileName)),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')]]></bpws:from>
                                <bpws:to variable="FileType"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="ProviderName"
                expression="xpath:{string($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:ProviderName/text())}"
                keepSrcElementName="false" name="UpdateProvideName" xDestination="$ProviderName">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[string($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:ProviderName/text())]]></bpws:from>
                                <bpws:to variable="ProviderName"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:if name="IfProviderIsNotAuthenticated">
            <bpws:condition><![CDATA[$ProviderName='']]></bpws:condition>
            <bpws:sequence name="Sequence6">
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="SetGlobalErrortoThreeAuthenticationFailed"
                        expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                        keepSrcElementName="false"
                        name="SetGlobalErrortoThreeAuthenticationFailed" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoThreeAuthenticationFailed"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:XSLTransform
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="ProviderIDAuthenticationFailure"
                        from="$XMLforGlobalException"
                        name="ProviderIDAuthenticationFailure"
                        stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','2021','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="ProviderIDAuthenticationFailure"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:params>
                            <soae-ab:param name="FirstBatch" value="'true'"/>
                            <soae-ab:param name="DtTimeStamp" value="soae-xf:get-time()"/>
                            <soae-ab:param name="RequestUUID" value="$TransactionUUID"/>
                            <soae-ab:param name="TransactionID" value="soae-xf:get-transaction-id()"/>
                            <soae-ab:param name="CertificateNumber" value="'NA'"/>
                            <soae-ab:param name="ApplicationName" value="'ZION-Origination'"/>
                            <soae-ab:param name="ExceptionCode" value="'2021'"/>
                            <soae-ab:param name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:StatusName"/>
                            <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:StatusDescription"/>
                            <soae-ab:param name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:LogLevel"/>
                            <soae-ab:param name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:Severity"/>
                            <soae-ab:param name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:Priority"/>
                            <soae-ab:param name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:AdditionalInfo)"/>
                            <soae-ab:param name="ProviderName" value="$ProviderName"/>
                            <soae-ab:param name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseName"/>
                            <soae-ab:param name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseCondition"/>
                            <soae-ab:param name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseCode"/>
                            <soae-ab:param name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:ResponseDescription"/>
                            <soae-ab:param name="IncomingFileName" value="$FileName"/>
                        </soae-ab:params>
                    </soae-ab:XSLTransform>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="XMLforGlobalException"
                        expression="xpath:{$ProviderIDAuthenticationFailure}"
                        keepSrcElementName="false"
                        name="UpdateProviderIDAuthenticationFailure" xDestination="$XMLforGlobalException">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ProviderIDAuthenticationFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:scope exitOnStandardFault="no" name="ScopeTAProviderIDAuthenticationFailed">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTAProviderIDAuthenticationFailed"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence100">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAProviderIDAuthenticationFailed"
                                from="$TransactionActivityXML"
                                name="TAProviderIDAuthenticationFailed"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','2021','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAProviderIDAuthenticationFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'FAIL'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'2021'"/>
                                    <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2021']/ns16:StatusDescription"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TAProviderIDAuthenticationFailed}"
                                keepSrcElementName="false"
                                name="UpdateTAProviderIDAuthenticationFailed" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAProviderIDAuthenticationFailed]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:throw faultName="bpws:missingRequest" name="Throw"/>
            </bpws:sequence>
        </bpws:if>
        <bpws:scope exitOnStandardFault="no" name="ScopeTAProviderAuthentication">
            <bpws:faultHandlers>
                <bpws:catch faultName="bpws:subLanguageExecutionFault">
                    <bpws:sequence>
                        <bpws:empty name="EmptyTAProviderIDAuthenticationFailed"/>
                    </bpws:sequence>
                </bpws:catch>
            </bpws:faultHandlers>
            <bpws:sequence name="Sequence60">
                <bpws:extensionActivity>
                    <soae-ab:XSLTransform
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="TAProviderAuthentication"
                        from="$TransactionActivityXML"
                        name="TAProviderAuthentication"
                        stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1037','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1037']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAProviderAuthentication"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:params>
                            <soae-ab:param name="FirstActivity" value="1"/>
                            <soae-ab:param name="BatchActivity" value="0"/>
                            <soae-ab:param name="MessageIdentifier" value="$TransactionUUID"/>
                            <soae-ab:param name="RecordCount" value="1"/>
                            <soae-ab:param name="Status" value="'SUCCESS'"/>
                            <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                            <soae-ab:param name="Code" value="'1037'"/>
                            <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1037']/ns16:StatusDescription"/>
                            <soae-ab:param name="MessageID" value="'NA'"/>
                        </soae-ab:params>
                    </soae-ab:XSLTransform>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="TransactionActivityXML"
                        expression="xpath:{$TAProviderAuthentication}"
                        keepSrcElementName="false"
                        name="UpdateTAStatusCodeConfig" xDestination="$TransactionActivityXML">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAProviderAuthentication]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
            </bpws:sequence>
        </bpws:scope>
        <bpws:if name="If_InvalidFileExtensionFormatFailure">
            <bpws:condition><![CDATA[string($AppConfig/ns15:ValidEDIFileExtensionFormats[ns15:EDIFileExtensionFormat=$FileType]/ns15:EDIFileExtensionFormat/text())='']]></bpws:condition>
            <bpws:sequence name="Sequence20">
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="SetGlobalErrortoThreeInvalidFileExtensionFormatFailed"
                        expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                        keepSrcElementName="false"
                        name="SetGlobalErrortoThreeInvalidFileExtensionFormatFailed" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoThreeInvalidFileExtensionFormatFailed"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:XSLTransform
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="InvalidFileExtensionFormatFailure"
                        from="$XMLforGlobalException"
                        name="InvalidFileExtensionFormatFailure"
                        stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','2024','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="InvalidFileExtensionFormatFailure"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:params>
                            <soae-ab:param name="FirstBatch" value="'true'"/>
                            <soae-ab:param name="DtTimeStamp" value="soae-xf:get-time()"/>
                            <soae-ab:param name="RequestUUID" value="$TransactionUUID"/>
                            <soae-ab:param name="TransactionID" value="soae-xf:get-transaction-id()"/>
                            <soae-ab:param name="CertificateNumber" value="'NA'"/>
                            <soae-ab:param name="ApplicationName" value="'ZION-Origination'"/>
                            <soae-ab:param name="ExceptionCode" value="'2024'"/>
                            <soae-ab:param name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:StatusName"/>
                            <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:StatusDescription"/>
                            <soae-ab:param name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:LogLevel"/>
                            <soae-ab:param name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:Severity"/>
                            <soae-ab:param name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:Priority"/>
                            <soae-ab:param name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:AdditionalInfo)"/>
                            <soae-ab:param name="ProviderName" value="$ProviderName"/>
                            <soae-ab:param name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseName"/>
                            <soae-ab:param name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseCondition"/>
                            <soae-ab:param name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseCode"/>
                            <soae-ab:param name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:ResponseDescription"/>
                            <soae-ab:param name="IncomingFileName" value="$FileName"/>
                        </soae-ab:params>
                    </soae-ab:XSLTransform>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="XMLforGlobalException"
                        expression="xpath:{$InvalidFileExtensionFormatFailure}"
                        keepSrcElementName="false"
                        name="UpdateInvalidFileExtensionFormatFailure" xDestination="$XMLforGlobalException">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$InvalidFileExtensionFormatFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:scope exitOnStandardFault="no" name="ScopeTAInvalidFileExtensionFormatFailure">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTAInvalidFileExtensionFormatFailure"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence100">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAInvalidFileExtensionFormatFailure"
                                from="$TransactionActivityXML"
                                name="TAInvalidFileExtensionFormatFailure"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','2024','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAInvalidFileExtensionFormatFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'FAIL'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'2024'"/>
                                    <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2024']/ns16:StatusDescription"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TAInvalidFileExtensionFormatFailure}"
                                keepSrcElementName="false"
                                name="UpdateTAInvalidFileExtensionFormatFailure" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInvalidFileExtensionFormatFailure]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:throw faultName="bpws:missingRequest" name="ThrowInvalidFileExtensionFormatFailure"/>
            </bpws:sequence>
        </bpws:if>
        <bpws:scope exitOnStandardFault="no" name="ScopeTAParseEDI1">
            <bpws:faultHandlers>
                <bpws:catch faultName="bpws:subLanguageExecutionFault">
                    <bpws:sequence>
                        <bpws:empty name="EmptyTAValidEDIFileExtensionFormatFailed"/>
                    </bpws:sequence>
                </bpws:catch>
            </bpws:faultHandlers>
            <bpws:sequence name="Sequence60">
                <bpws:extensionActivity>
                    <soae-ab:XSLTransform
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="TAValidEDIFileExtensionFormat"
                        from="$TransactionActivityXML"
                        name="TAValidEDIFileExtensionFormat"
                        stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1050','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1050']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAValidEDIFileExtensionFormat"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:params>
                            <soae-ab:param name="FirstActivity" value="1"/>
                            <soae-ab:param name="BatchActivity" value="0"/>
                            <soae-ab:param name="MessageIdentifier" value="$TransactionUUID"/>
                            <soae-ab:param name="RecordCount" value="1"/>
                            <soae-ab:param name="Status" value="'SUCCESS'"/>
                            <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                            <soae-ab:param name="Code" value="'1050'"/>
                            <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1050']/ns16:StatusDescription"/>
                            <soae-ab:param name="MessageID" value="'NA'"/>
                        </soae-ab:params>
                    </soae-ab:XSLTransform>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="TransactionActivityXML"
                        expression="xpath:{$TAValidEDIFileExtensionFormat}"
                        keepSrcElementName="false"
                        name="UpdateValidEDIFileExtensionFormat" xDestination="$TransactionActivityXML">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAValidEDIFileExtensionFormat]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
            </bpws:sequence>
        </bpws:scope>
        <bpws:extensionActivity>
            <soae-ab:Comment name="Comment2">The IntermediateMIMOVersion variable value extracting from OnBoardingConfig file as this workflow doesn't utilize LPA profile.&#xd;
Currently the value is set to MISMO231in OnBoardingConfig and at a later point we can modify the versions in accordingly.</soae-ab:Comment>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                destinationTypeKind="TYPE"
                destinationVariable="IntermediateMISMOVersion"
                expression="xpath:{string($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:MISMOVersion)}"
                keepSrcElementName="false"
                name="IntermediateMISMOVersion" xDestination="">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[string($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:MISMOVersion)]]></bpws:from>
                                <bpws:to variable="IntermediateMISMOVersion"/>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:if name="IfRequestTypeText">
            <bpws:condition><![CDATA[$FileType!='XML']]></bpws:condition>
            <bpws:sequence name="Sequence1">
                <bpws:scope exitOnStandardFault="no" name="ScopeCleanEDI">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                            <bpws:sequence>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeCleanEDIFailed"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeCleanEDIFailed" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoThreeCleanEDIFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="CleanEDIFailure"
                                    from="$XMLforGlobalException"
                                    name="CleanEDIFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4035','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="CleanEDIFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'4035'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$CleanEDIFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateCleanEDIFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$CleanEDIFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:scope exitOnStandardFault="no" name="ScopeTACleanEDIFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTACleanEDIFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TACleanEDIFailed"
                                    from="$TransactionActivityXML"
                                    name="TACleanEDIFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4035','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TACleanEDIFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'4035'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4035']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TACleanEDIFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTACleanEDIFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TACleanEDIFailed]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                </bpws:scope>
                                <bpws:rethrow/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:extensionActivity>
                        <soae-ab:InvokeBuilder addAttachments="false"
                            allowCrossAppInvocation="false"
                            allowDynamicInterappInvocation="false"
                            allowLocalInvocation="false"
                            bindingType="Plain" compression="identity"
                            destinationType="{http://www.example.com/Origination/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                            destinationTypeKind="MESSAGE"
                            destinationVariable="CleanEDI"
                            dontExtractMsgToVar="false"
                            dynamicAddress=""
                            endpointConfigurationType="Configured"
                            imaKey="CleanEDI_IMA_Key"
                            inboundPoliciesGroup="" messageBodyFrom=""
                            multipartInboundData="false"
                            multipartOutboundData="false"
                            name="CleanEDI" partnerLink="CleanEDI"
                            passThroughEnabled="false"
                            rawEnvelopeFrom=""
                            receiveRawEnvelope="false"
                            sendRawEnvelope="false" throwFault="false"
                            timeout="" useDynamicAddress="false">
                            <soae-ab:outputDataMapping partName="" xpath="$Receive.body"/>
                            <soae-ab:outboundPolicies/>
                            <soae-ab:inputData binary="true"
                                empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                            <soae-ab:outputData binary="true"
                                oneway="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                            <soae-ab:customTransport
                                serviceURI="soae-custom://EDI260Cleanup" soapAction=""/>
                            <soae-ab:wsdlEndpointConfig defaultFlags="0"
                                inputMsg="CleanEDIInput"
                                inputMsgPart="body"
                                operation="CleanEDIOperation"
                                outputMsg="CleanEDIOutput"
                                outputMsgPart="body" port="CleanEDIPort"
                                service="{http://www.example.com/Origination/custom/bin/EDIOriginationProcess/CleanEDI}CleanEDIService"
                                soapVersion="1.1"
                                tns="http://www.example.com/Origination/custom/bin/EDIOriginationProcess/CleanEDI" wsdlFileName="/Origination/bin/EDIOriginationProcess/CleanEDI.wsdl"/>
                            <soae-ab:inboundPolicies/>
                            <bpws:scope>
                                <bpws:variables>
                                    <bpws:variable name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns44:CleanEDIInput" name="reply_internal_OutputVariable"/>
                                </bpws:variables>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($CleanEDI_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$Receive.body]]></bpws:from>
                                    <bpws:to part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="CleanEDIOperation"
                                    outputVariable="CleanEDI"
                                    partnerLink="CleanEDI"
                                    portType="ns44:CleanEDIServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:ima-key="CleanEDI_IMA_Key"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($invoke_internal_OMAKey)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                </bpws:sequence>
                            </bpws:scope>
                        </soae-ab:InvokeBuilder>
                    </bpws:extensionActivity>
                </bpws:scope>
                <bpws:scope exitOnStandardFault="no" name="ScopeTACleanEDI">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTACleanEDIFailed"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence60">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TACleanEDI"
                                from="$TransactionActivityXML"
                                name="TACleanEDI"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1043','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1043']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TACleanEDI"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1043'"/>
                                    <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1043']/ns16:StatusDescription"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TACleanEDI}"
                                keepSrcElementName="false"
                                name="UpdateTACleanEDI" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TACleanEDI]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="EDI997Errors"
                        expression="xpath:{''}"
                        keepSrcElementName="false" name="EDI997Errors" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="EDI997Errors"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="InterchangeStart"
                        expression="xpath:{''}"
                        keepSrcElementName="false"
                        name="InterchangeStart" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="InterchangeStart"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="InterchangeEnd"
                        expression="xpath:{''}"
                        keepSrcElementName="false" name="InterchangeEnd" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="InterchangeEnd"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="ParsedErrorsData"
                        expression="xpath:{''}"
                        keepSrcElementName="false"
                        name="ParsedErrorsData" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="ParsedErrorsData"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="TALogErrors"
                        expression="xpath:{''}"
                        keepSrcElementName="false" name="TALogErrors" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="TALogErrors"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="TPInterchangeXML"
                        expression="xpath:{''}"
                        keepSrcElementName="true"
                        name="TPInterchangeXML" xDestination="">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy keepSrcElementName="yes">
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="TPInterchangeXML"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:if name="IfProviderisPH">
                    <bpws:condition><![CDATA[$ProviderID='PH']]></bpws:condition>
                    <bpws:sequence name="Sequence27">
                        <bpws:scope exitOnStandardFault="no" name="ScopeParseEDI872">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeParseEDI872"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeParseEDI872" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrortoThreeParseEDI872"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="ParseEDI872Failure"
                                    from="$XMLforGlobalException"
                                    name="ParseEDI872Failure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4029','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="ParseEDI872Failure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'4029'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$ParseEDI872Failure}"
                                    keepSrcElementName="false"
                                    name="UpdateParseEDI872Failure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ParseEDI872Failure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAParseEDI872Failed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAParseEDI872Failed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAParseEDI872Failed"
                                    from="$TransactionActivityXML"
                                    name="TAParseEDI872Failed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4029','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAParseEDI872Failed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'4029'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAParseEDI872Failed}"
                                    keepSrcElementName="false"
                                    name="UpdateTAParseEDI872Failed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAParseEDI872Failed]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:sequence name="Sequence8">
                                <bpws:extensionActivity>
                                    <soae-ab:CDEBuilder
                                    destinationType="{http://www.example.com/Origination/cde/EDI872}OutputData"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="ParseEDI872"
                                    from="$CleanEDI.body"
                                    inputContentType="application/octet-stream"
                                    name="ParseEDI872"
                                    outputContentType="text/xml"
                                    outputIsElement="true"
                                    partnerLink="ParseEDI872"
                                    service="EDI872" type="{http://www.informatica.com/B2B/X12Wrapper}interchanges">
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    messageType="ns46:InputData" name="dataMappingInput"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$CleanEDI.body]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="dataMappingInput"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="dataMappingInput"
                                    operation="dataMapping"
                                    outputVariable="ParseEDI872"
                                    partnerLink="ParseEDI872"
                                    portType="ns46:EDI872PortType"
                                    soae-bpel:always-create-key="no" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:CDEBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangeStart"
                                    expression="xpath:{1}"
                                    keepSrcElementName="false"
                                    name="PHHStart" xDestination="$InterchangeStart">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[1]]></bpws:from>
                                    <bpws:to variable="InterchangeStart"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangeEnd"
                                    expression="xpath:{1}"
                                    keepSrcElementName="false"
                                    name="PHHEnd" xDestination="$InterchangeEnd">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[1]]></bpws:from>
                                    <bpws:to variable="InterchangeEnd"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="EDI997Errors"
                                    expression="xpath:{$ParseEDI872.body/ns11:Errors}"
                                    keepSrcElementName="false"
                                    name="EDI872Error" xDestination="$EDI997Errors">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ParseEDI872.body/ns11:Errors]]></bpws:from>
                                    <bpws:to variable="EDI997Errors"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:scope>
                    </bpws:sequence>
                    <bpws:else>
                        <bpws:sequence name="Sequence21">
                            <bpws:scope exitOnStandardFault="no" name="ScopeEDI872BOA">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeParseEDI872BOA"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeParseEDI872BOA" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeParseEDI872BOA"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="ParseEDI872FailureBOA"
                                    from="$XMLforGlobalException"
                                    name="ParseEDI872FailureBOA"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4029','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="ParseEDI872FailureBOA"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'4029'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$ParseEDI872FailureBOA}"
                                    keepSrcElementName="false"
                                    name="UpdateParseEDI872FailureBOA" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ParseEDI872FailureBOA]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeParseEDI872FailedBOA">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyParseEDI872FailureBOA"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence22">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAParseEDI872FailedBOA"
                                    from="$TransactionActivityXML"
                                    name="TAParseEDI872FailedBOA"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4029','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAParseEDI872FailedBOA"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'4029'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4029']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAParseEDI872Failed}"
                                    keepSrcElementName="false"
                                    name="UpdateTAParseEDI872FailedBOA" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAParseEDI872Failed]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence23">
                                    <bpws:extensionActivity>
                                    <soae-ab:CDEBuilder
                                    destinationType="{http://www.example.com/Origination/cde/EDI872_BOA}OutputData"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="EDI872BOA"
                                    from="$CleanEDI.body"
                                    inputContentType="application/octet-stream"
                                    name="EDI872BOA"
                                    outputContentType="text/xml"
                                    outputIsElement="true"
                                    partnerLink="EDI872BOA"
                                    service="EDI872_BOA" type="{http://www.radian.biz/ClientConnectivity/zion/Origination/BOAInterchanges}BOAInterchanges">
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    messageType="ns61:InputData" name="dataMappingInput"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$CleanEDI.body]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="dataMappingInput"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="dataMappingInput"
                                    operation="dataMapping"
                                    outputVariable="EDI872BOA"
                                    partnerLink="EDI872BOA"
                                    portType="ns61:EDI872_BOAPortType"
                                    soae-bpel:always-create-key="no" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:CDEBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangeStart"
                                    expression="xpath:{2}"
                                    keepSrcElementName="false"
                                    name="BOAStart" xDestination="$InterchangeStart">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[2]]></bpws:from>
                                    <bpws:to variable="InterchangeStart"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangeEnd"
                                    expression="xpath:{count($EDI872BOA.body/interchanges)}"
                                    keepSrcElementName="false"
                                    name="BOAEnd" xDestination="$InterchangeEnd">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[count($EDI872BOA.body/interchanges)]]></bpws:from>
                                    <bpws:to variable="InterchangeEnd"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="EDI997Errors"
                                    expression="xpath:{$EDI872BOA.body/interchanges[1]/ns11:Errors}"
                                    keepSrcElementName="false"
                                    name="EDI872BOAError" xDestination="$EDI997Errors">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI872BOA.body/interchanges[1]/ns11:Errors]]></bpws:from>
                                    <bpws:to variable="EDI997Errors"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="RecordCount"
                                    expression="xpath:{count($EDI872BOA.body/interchanges)-1}"
                                    keepSrcElementName="false"
                                    name="UpdateRecordCount" xDestination="$RecordCount">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[count($EDI872BOA.body/interchanges)-1]]></bpws:from>
                                    <bpws:to variable="RecordCount"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                </bpws:sequence>
                            </bpws:scope>
                        </bpws:sequence>
                    </bpws:else>
                </bpws:if>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="MessageTransactionUUID"
                        expression="xpath:{$TransactionUUID}"
                        keepSrcElementName="false" name="UpdateUUID" xDestination="$MessageTransactionUUID">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionUUID]]></bpws:from>
                                    <bpws:to variable="MessageTransactionUUID"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
                <bpws:scope exitOnStandardFault="no" name="ScopeTAParseEDI872">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="bpws:subLanguageExecutionFault">
                            <bpws:sequence>
                                <bpws:empty name="EmptyTAOnBoardingConfigFailed"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:sequence name="Sequence60">
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="TAParseEDI872"
                                from="$TransactionActivityXML"
                                name="TAParseEDI872"
                                stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1038','Description',concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1038']/ns16:StatusDescription,'. Provider ID:',$ProviderID),'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAParseEDI872"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstActivity" value="1"/>
                                    <soae-ab:param name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1038'"/>
                                    <soae-ab:param name="Description" value="concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1038']/ns16:StatusDescription,'. Provider ID:',$ProviderID)"/>
                                    <soae-ab:param name="MessageID" value="'NA'"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="TransactionActivityXML"
                                expression="xpath:{$TAParseEDI872}"
                                keepSrcElementName="false"
                                name="UpdateTAParseEDI872" xDestination="$TransactionActivityXML">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAParseEDI872]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                    </bpws:sequence>
                </bpws:scope>
                <bpws:forEach counterName="Counter" name="ForEach" parallel="no">
                    <bpws:startCounterValue><![CDATA[$InterchangeStart]]></bpws:startCounterValue>
                    <bpws:finalCounterValue><![CDATA[$InterchangeEnd]]></bpws:finalCounterValue>
                    <bpws:scope exitOnStandardFault="no">
                        <bpws:sequence name="Sequence7">
                            <bpws:scope exitOnStandardFault="no" name="ScopeEDI872Batch">
                                <bpws:faultHandlers>
                                    <bpws:catchAll>
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/Origination/http/bin/EDIOriginationProcess/WriteExceptionLOGOS}WriteExceptionLOGOSOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="WriteExceptionToFile"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat(&quot;file://&quot;,$AppConfig/ns15:ErrorLogPath/text(),&quot;RDN_&quot;,soae-xf:get-node-name(),'_',$MessageTransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')"
                                    endpointConfigurationType="Configured"
                                    imaKey="WriteExceptionToFile_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="WriteExceptionToFile"
                                    partnerLink="WriteExceptionToFile"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">

                                    <soae-ab:outputDataMapping
                                    partName="" xpath="soae-xf:encode-binary-string(&quot;utf-8&quot;,&quot;base64&quot;,concat(exslt:format-date(&quot;now-local&quot;,&quot;MMM dd HH:mm:ss.SSS&quot;),&quot;|&quot;,soae-xf:get-node-name(),&quot;|&quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:ApplicationName/text(),&quot;|&quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode/text(),&quot;|&quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:Priority/text(),&quot;|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: &quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:IncomingFileName/text(),&quot;|Source File UUID: &quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:ProviderName/text(),&quot;|AddlInfo: &quot;,$XMLforGlobalException/ns22:EXCEPTION/ns22:AdditionalInfo/text()))"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData
                                    binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData
                                    binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>

                                    <soae-ab:fileTransport
                                    serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>

                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="WriteExceptionToFileInput"
                                    inputMsgPart="body"
                                    operation="WriteExceptionToFileOperation"
                                    outputMsg="WriteExceptionToFileOutput"
                                    outputMsgPart="body"
                                    port="WriteExceptionToFilePort"
                                    service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteExceptionToFile}WriteExceptionToFileService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteExceptionToFile" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteExceptionToFile.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>

                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>

                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>

                                    <bpws:variable
                                    messageType="ns60:WriteExceptionToFileInput" name="reply_internal_OutputVariable"/>

                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteExceptionToFile_IMA_Key)]]></bpws:from>

                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>

                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:encode-binary-string("utf-8","base64",concat(exslt:format-date("now-local","MMM dd HH:mm:ss.SSS"),"|",soae-xf:get-node-name(),"|",$XMLforGlobalException/ns22:EXCEPTION/ns22:ApplicationName/text(),"|",$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode/text(),"|",$XMLforGlobalException/ns22:EXCEPTION/ns22:Priority/text(),"|MICertificateIdentifier: NA|BTErrCode: NA|IncomingFileName: ",$XMLforGlobalException/ns22:EXCEPTION/ns22:IncomingFileName/text(),"|Source File UUID: ",$XMLforGlobalException/ns22:EXCEPTION/ns22:RequestUUID/text(),'|Fault Description: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:Description/text(),'|Provider Name: ',$XMLforGlobalException/ns22:EXCEPTION/ns22:ProviderName/text(),"|AddlInfo: ",$XMLforGlobalException/ns22:EXCEPTION/ns22:AdditionalInfo/text()))]]></bpws:from>

                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat("file://",$AppConfig/ns15:ErrorLogPath/text(),"RDN_",soae-xf:get-node-name(),'_',$MessageTransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>

                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("file://",$AppConfig/ns15:ErrorLogPath/text(),"RDN_",soae-xf:get-node-name(),'_',$MessageTransactionUUID,'_',$XMLforGlobalException/ns22:EXCEPTION/ns22:ExceptionCode,'_',exslt:format-date('now-local','yyyyMMddhhmmssSSS'),'.err')]]></bpws:from>

                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>

                                    <bpws:to partnerLink="WriteExceptionToFile"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteExceptionToFileOperation"
                                    partnerLink="WriteExceptionToFile"
                                    portType="ns60:WriteExceptionToFileServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TATPErrorLog"
                                    logLevel="info"
                                    name="TATPErrorLog"
                                    nodeName="false"
                                    optionalData="$Counter" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Exception inside FOR loop',';'),$Counter)]]></bpws:from>

                                    <bpws:to variable="TATPErrorLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="TATPErrorLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Exception inside FOR loop</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    <bpws:empty name="Continue"/>
                                    </bpws:sequence>
                                    </bpws:catchAll>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence26">
                                    <bpws:if name="IfProviderisBA">
                                    <bpws:condition><![CDATA[$ProviderID='BA']]></bpws:condition>
                                    <bpws:sequence name="Sequence24">
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="ParsedErrorsData"
                                    expression="xpath:{string($EDI872BOA.body/interchanges[$Counter]/ErrorsFound)}"
                                    keepSrcElementName="false"
                                    name="BOAErrorsData" xDestination="$ParsedErrorsData">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[string($EDI872BOA.body/interchanges[$Counter]/ErrorsFound)]]></bpws:from>

                                    <bpws:to variable="ParsedErrorsData"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TALogErrors"
                                    expression="xpath:{$EDI872BOA.body/interchanges[$Counter]/ns11:Errors}"
                                    keepSrcElementName="false"
                                    name="BOATALog" xDestination="$TALogErrors">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI872BOA.body/interchanges[$Counter]/ns11:Errors]]></bpws:from>

                                    <bpws:to variable="TALogErrors"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:if name="IfMultipleRecords">
                                    <bpws:condition><![CDATA[$RecordCount > 1]]></bpws:condition>
                                    <bpws:sequence name="Sequence28">
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="MessageTransactionUUID"
                                    expression="xpath:{soae-xf:get-UUID()}"
                                    keepSrcElementName="false"
                                    name="GenrateNewUUID" xDestination="$MessageTransactionUUID">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:get-UUID()]]></bpws:from>

                                    <bpws:to variable="MessageTransactionUUID"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="BatchActivity"
                                    expression="xpath:{1}"
                                    keepSrcElementName="false"
                                    name="UpdateBatchActivity" xDestination="$BatchActivity">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[1]]></bpws:from>

                                    <bpws:to variable="BatchActivity"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:if>
                                    </bpws:sequence>
                                    <bpws:else>
                                    <bpws:sequence name="Sequence25">
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="ParsedErrorsData"
                                    expression="xpath:{string($ParseEDI872.body/ErrorsFound)}"
                                    keepSrcElementName="false"
                                    name="PHHErrorsData" xDestination="$ParsedErrorsData">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[string($ParseEDI872.body/ErrorsFound)]]></bpws:from>

                                    <bpws:to variable="ParsedErrorsData"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TALogErrors"
                                    expression="xpath:{$ParseEDI872.body/ns11:Errors}"
                                    keepSrcElementName="false"
                                    name="PHHTALog" xDestination="$TALogErrors">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ParseEDI872.body/ns11:Errors]]></bpws:from>

                                    <bpws:to variable="TALogErrors"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:else>
                                    </bpws:if>
                                    <bpws:if name="IfErrorsInParsedData">
                                    <bpws:condition><![CDATA[$ParsedErrorsData='true']]></bpws:condition>
                                    <bpws:sequence name="Sequence2">
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="EDIError_DevTALog"
                                    logLevel="info"
                                    name="EDIError_DevTALog"
                                    nodeName="false"
                                    optionalData="$TALogErrors" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','EDI error log.',';'),$TALogErrors)]]></bpws:from>

                                    <bpws:to variable="EDIError_DevTALog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="EDIError_DevTALog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>EDI error log.</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeErrorsInParsedData"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeErrorsInParsedData" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeErrorsInParsedData"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="ErrorsInParsedDataFailure"
                                    from="$XMLforGlobalException"
                                    name="ErrorsInParsedDataFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4030','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="ErrorsInParsedDataFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'4030'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$ErrorsInParsedDataFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateErrorsInParsedDataFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ErrorsInParsedDataFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAErrorsInParsedDataFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAErrorsInParsedDataFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAErrorsInParsedDataFailed"
                                    from="$TransactionActivityXML"
                                    name="TAErrorsInParsedDataFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',$BatchActivity,'MessageIdentifier',$MessageTransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4030','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAErrorsInParsedDataFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="$BatchActivity"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$MessageTransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'4030'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4030']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAErrorsInParsedDataFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTAErrorsInParsedDataFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAErrorsInParsedDataFailed]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:throw
                                    faultName="bpws:missingRequest" name="ThrowEDIDataError"/>
                                    </bpws:sequence>
                                    <bpws:else>
                                    <bpws:sequence name="Sequence7">
                                    <bpws:if name="IfValidInterchange">
                                    <bpws:condition><![CDATA[$ProviderID='BA']]></bpws:condition>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TPInterchangeXML"
                                    expression="xpath:{$EDI872BOA.body/interchanges[$Counter]/ns11:interchange}"
                                    keepSrcElementName="false"
                                    name="BOAInterChangeXML" xDestination="$TPInterchangeXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI872BOA.body/interchanges[$Counter]/ns11:interchange]]></bpws:from>

                                    <bpws:to variable="TPInterchangeXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:else>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TPInterchangeXML"
                                    expression="xpath:{$ParseEDI872.body/ns11:interchange}"
                                    keepSrcElementName="false"
                                    name="PHHInterChangeXML" xDestination="$TPInterchangeXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ParseEDI872.body/ns11:interchange]]></bpws:from>

                                    <bpws:to variable="TPInterchangeXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:else>
                                    </bpws:if>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.informatica.com/B2B/X12}interchange"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="InterchangeXML"
                                    expression="xpath:{$TPInterchangeXML}"
                                    keepSrcElementName="false"
                                    name="InterchangeXML" xDestination="">
                                    <soae-ab:explicitImports>

                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="cdeServices/EDI872/X12_4010_872_schema.xsd" tns="http://www.informatica.com/B2B/X12"/>
                                    </soae-ab:explicitImports>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TPInterchangeXML]]></bpws:from>

                                    <bpws:to variable="InterchangeXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:else>
                                    </bpws:if>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeInterchangesXMLSchemaValidation">
                                    <bpws:faultHandlers>
                                    <bpws:catch
                                    faultElement="soae-fault:schemaValidateNodeFault" faultVariable="InterchangesXMLSchemaValidation">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeXMLSchemaValidationFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeXMLSchemaValidationFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeXMLSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangesXMLSchemaValidationFailure"
                                    from="$XMLforGlobalException"
                                    name="InterchangesXMLSchemaValidationFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4031','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',string($InterchangesXMLSchemaValidation/faultString)),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="InterchangesXMLSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>

                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>

                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>

                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>

                                    <soae-ab:param
                                    name="ExceptionCode" value="'4031'"/>

                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:StatusName"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:LogLevel"/>

                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:Severity"/>

                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:Priority"/>

                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',string($InterchangesXMLSchemaValidation/faultString))"/>

                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>

                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseName"/>

                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseCondition"/>

                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseCode"/>

                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:ResponseDescription"/>

                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$InterchangesXMLSchemaValidationFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateInterchangesXMLSchemaValidationFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$InterchangesXMLSchemaValidationFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAInterchangesXMLSchemaValidationFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>

                                    <bpws:empty name="EmptyTAInterchangesXMLSchemaValidationFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAInterchangesXMLSchemaValidation"
                                    from="$TransactionActivityXML"
                                    name="TAInterchangesXMLSchemaValidation"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',$BatchActivity,'MessageIdentifier',$MessageTransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4031','Description',concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:StatusDescription,' - ',string($InterchangesXMLSchemaValidation/faultString)),'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAInterchangesXMLSchemaValidation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="$BatchActivity"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$MessageTransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'4031'"/>

                                    <soae-ab:param
                                    name="Description" value="concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4031']/ns16:StatusDescription,' - ',string($InterchangesXMLSchemaValidation/faultString))"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAInterchangesXMLSchemaValidation}"
                                    keepSrcElementName="false"
                                    name="UpdateTAErrorsInParsedDataFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInterchangesXMLSchemaValidation]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:extensionActivity>
                                    <soae-ab:ValidationBuilder
                                    componentIdentification="elementName"
                                    data="$InterchangeXML"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangesXMLSchemaValidation"
                                    name="InterchangesXMLSchemaValidation"
                                    schemaIdentification="implied"
                                    throwFault="true"
                                    urlLocal="false" variable="InterchangeXML">
                                    <bpws:scope>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:validate variables="InterchangeXML"/>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[true()]]></bpws:from>

                                    <bpws:to variable="InterchangesXMLSchemaValidation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:scope>
                                    </soae-ab:ValidationBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:scope>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeTAInterchangesSchemaValidation">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAOnBoardingConfigFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence60">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAInterchangesSchemaValidation"
                                    from="$TransactionActivityXML"
                                    name="TAInterchangesSchemaValidation"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',$BatchActivity,'MessageIdentifier',$MessageTransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1039','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1039']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAInterchangesSchemaValidation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="$BatchActivity"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$MessageTransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1039'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1039']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAInterchangesSchemaValidation}"
                                    keepSrcElementName="false"
                                    name="UpdateTAInterchangesSchemaValidation" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInterchangesSchemaValidation]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeInterchangesToMISMOXSLTransformation">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeInterchangesToMISMOTransformationFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeInterchangesToMISMOTransformationFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeInterchangesToMISMOTransformationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangesToMISMOTransformationFailure"
                                    from="$XMLforGlobalException"
                                    name="InterchangesToMISMOTransformationFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$MessageTransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4032','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="InterchangesToMISMOTransformationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>

                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="RequestUUID" value="$MessageTransactionUUID"/>

                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>

                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>

                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>

                                    <soae-ab:param
                                    name="ExceptionCode" value="'4032'"/>

                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:StatusName"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:LogLevel"/>

                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:Severity"/>

                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:Priority"/>

                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:AdditionalInfo)"/>

                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>

                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseName"/>

                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseCondition"/>

                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseCode"/>

                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:ResponseDescription"/>

                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$InterchangesToMISMOTransformationFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateInterchangesToMISMOTransformationFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$InterchangesToMISMOTransformationFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAInterchangesToMISMOTransformationFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>

                                    <bpws:empty name="EmptyTAInterchangesToMISMOTransformationFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAInterchangesToMISMOTransformationFailed"
                                    from="$TransactionActivityXML"
                                    name="TAInterchangesToMISMOTransformationFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4032','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAInterchangesToMISMOTransformationFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'4032'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4032']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAInterchangesToMISMOTransformationFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTAInterchangesToMISMOTransformationFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInterchangesToMISMOTransformationFailed]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InterchangesToMISMOXSLTransformation"
                                    from="$InterchangeXML"
                                    name="InterchangesToMISMOXSLTransformation"
                                    stylesheet="concat($AppConfig/ns15:FileURL,'SharedXSLs/EDI872Interchangesto',$IntermediateMISMOVersion,'.xsl')" stylesheetType="XPATH">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform(concat($AppConfig/ns15:FileURL,'SharedXSLs/EDI872Interchangesto',$IntermediateMISMOVersion,'.xsl'),$InterchangeXML,'VendorID',$ProviderID)]]></bpws:from>
                                    <bpws:to variable="InterchangesToMISMOXSLTransformation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="VendorID" value="$ProviderID"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    </bpws:scope>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeTAInterchangesToMISMOTransfromation">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAInterchangesToMISMOTransfromationFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence60">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAInterchangesToMISMOTransfromation"
                                    from="$TransactionActivityXML"
                                    name="TAInterchangesToMISMOTransfromation"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1040','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1040']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAInterchangesToMISMOTransfromation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1040'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1040']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAInterchangesToMISMOTransfromation}"
                                    keepSrcElementName="false"
                                    name="UpdateTAInterchangesToMISMOTransfromation" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInterchangesToMISMOTransfromation]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeDownstreamSystemSchemaValidation">
                                    <bpws:faultHandlers>
                                    <bpws:catch
                                    faultElement="soae-fault:schemaValidateNodeFault" faultVariable="MISMO231DownstreamSystemXMLSchemaValidationVar">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoMISMO231DownstreamSystemXMLSchemaValidationFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoMISMO231DownstreamSystemXMLSchemaValidationFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoMISMO231DownstreamSystemXMLSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="MISMO231DownstreamSystemXMLSchemaValidationFailure"
                                    from="$XMLforGlobalException"
                                    name="MISMO231DownstreamSystemXMLSchemaValidationFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$MessageTransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','4033','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',string($MISMO231DownstreamSystemXMLSchemaValidationVar/faultString)),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="MISMO231DownstreamSystemXMLSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>

                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="RequestUUID" value="$MessageTransactionUUID"/>

                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>

                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>

                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>

                                    <soae-ab:param
                                    name="ExceptionCode" value="'4033'"/>

                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:StatusName"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:LogLevel"/>

                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:Severity"/>

                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:Priority"/>

                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',string($MISMO231DownstreamSystemXMLSchemaValidationVar/faultString))"/>

                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>

                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseName"/>

                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseCondition"/>

                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseCode"/>

                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:ResponseDescription"/>

                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$MISMO231DownstreamSystemXMLSchemaValidationFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateMISMO231DownstreamSystemXMLSchemaValidationFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$MISMO231DownstreamSystemXMLSchemaValidationFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAMISMO231DownstreamSystemXMLSchemaValidationFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>

                                    <bpws:empty name="EmptyTAMISMO231DownstreamSystemXMLSchemaValidationFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAMISMO231DownstreamSystemXMLSchemaValidation"
                                    from="$TransactionActivityXML"
                                    name="TAMISMO231DownstreamSystemXMLSchemaValidation"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','4033','Description',concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:StatusDescription,' - ',string($MISMO231DownstreamSystemXMLSchemaValidationVar/faultString)),'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAMISMO231DownstreamSystemXMLSchemaValidation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'4033'"/>

                                    <soae-ab:param
                                    name="Description" value="concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='4033']/ns16:StatusDescription,' - ',string($MISMO231DownstreamSystemXMLSchemaValidationVar/faultString))"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAMISMO231DownstreamSystemXMLSchemaValidation}"
                                    keepSrcElementName="false"
                                    name="UpdateTAErrorsInParsedDataFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAMISMO231DownstreamSystemXMLSchemaValidation]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:extensionActivity>
                                    <soae-ab:ValidationBuilder
                                    componentIdentification="elementName"
                                    data="$InterchangesToMISMOXSLTransformation"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="MISMO231DownstreamSystemXMLSchemaValidation"
                                    elementName="REQUEST_GROUP"
                                    name="MISMO231DownstreamSystemXMLSchemaValidation"
                                    schemaIdentification="targetNamespace"
                                    targetNamespace="http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationRequest"
                                    throwFault="true" urlLocal="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:schema-validate-node($InterchangesToMISMOXSLTransformation,'targetNamespace','http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationRequest','element','REQUEST_GROUP')]]></bpws:from>
                                    <bpws:to variable="MISMO231DownstreamSystemXMLSchemaValidation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:ValidationBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:scope>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeTAMISMO231XMLSchemaValidation">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAOnBoardingConfigFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence60">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAMISMO231XMLSchemaValidation"
                                    from="$TransactionActivityXML"
                                    name="TAMISMO231XMLSchemaValidation"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1041','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1041']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAMISMO231XMLSchemaValidation"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1041'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1041']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAMISMO231XMLSchemaValidation}"
                                    keepSrcElementName="false"
                                    name="UpdateTAMISMO231XMLSchemaValidation" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAMISMO231XMLSchemaValidation]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeInvokeOriginationCoreWorkflow">
                                    <bpws:faultHandlers>
                                    <bpws:catchAll>
                                    <bpws:sequence>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeInvokeOriginationCoreWorkflowFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeInvokeOriginationCoreWorkflowFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeInvokeOriginationCoreWorkflowFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InvokeOriginationCoreWorkflowFailure"
                                    from="$XMLforGlobalException"
                                    name="InvokeOriginationCoreWorkflowFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$MessageTransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','5017','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="InvokeOriginationCoreWorkflowFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>

                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="RequestUUID" value="$MessageTransactionUUID"/>

                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>

                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>

                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>

                                    <soae-ab:param
                                    name="ExceptionCode" value="'5017'"/>

                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:StatusName"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:LogLevel"/>

                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:Severity"/>

                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:Priority"/>

                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:AdditionalInfo)"/>

                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>

                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseName"/>

                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseCondition"/>

                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseCode"/>

                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:ResponseDescription"/>

                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$InvokeOriginationCoreWorkflowFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateInvokeOriginationCoreWorkflowFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$InvokeOriginationCoreWorkflowFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAInvokeOriginationCoreWorkflowFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>

                                    <bpws:empty name="EmptyTAInvokeOriginationCoreWorkflowFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAInvokeOriginationCoreWorkflowFailed"
                                    from="$TransactionActivityXML"
                                    name="TAInvokeOriginationCoreWorkflowFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','5017','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAInvokeOriginationCoreWorkflowFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'5017'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5017']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAInvokeOriginationCoreWorkflowFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTAInvokeOriginationCoreWorkflowFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInvokeOriginationCoreWorkflowFailed]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catchAll>
                                    </bpws:faultHandlers>
                                    <bpws:extensionActivity>
                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="InvokeOriginationCoreWorkflow"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress=""
                                    endpointConfigurationType="Configured"
                                    imaKey="InvokeOriginationCoreWorkflow_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="InvokeOriginationCoreWorkflow"
                                    partnerLink="InvokeOriginationCoreWorkflow"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="" useDynamicAddress="false">

                                    <soae-ab:outputDataMapping
                                    partName="" xpath="$InterchangesToMISMOXSLTransformation"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:metadata
                                    metadataSource="POLICY" xpath="">
                                    <soae-ab:policies>
                                    <soae-ab:policy name="EDIMessageMediationPolicy.msgmed">
                                    <soae-ab:parameters>

                                    <soae-ab:parameter
                                    name="http:version" value="$IntermediateMISMOVersion"/>

                                    <soae-ab:parameter
                                    name="http:vendorid" value="$ProviderID"/>

                                    <soae-ab:parameter
                                    name="http:UUID" value="$MessageTransactionUUID"/>
                                    </soae-ab:parameters>
                                    </soae-ab:policy>
                                    </soae-ab:policies>
                                    <soae-ab:httpRequest
                                    method=""
                                    query="" uri="" version="HTTP/1.0"/>
                                    </soae-ab:metadata>
                                    <soae-ab:inputData
                                    binary="false"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData
                                    binary="false"
                                    oneway="false" xsdElement="{http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationResponse}MI_RESPONSE"/>
                                    <soae-ab:httpTransport
                                    method=""
                                    serviceURI="https://b2bint.radianmi.biz:443/Origination"
                                    soapAction="http://Invoke" translateErrorResponseIntoWorkflowFault="true"/>

                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="InvokeOriginationCoreWorkflowInput"
                                    inputMsgPart="body"
                                    operation="InvokeOriginationCoreWorkflowOperation"
                                    outputMsg="InvokeOriginationCoreWorkflowOutput"
                                    outputMsgPart="body"
                                    port="InvokeOriginationCoreWorkflowPort"
                                    service="{http://www.example.com/Origination/http/bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow}InvokeOriginationCoreWorkflowService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/http/bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow" wsdlFileName="/Origination/bin/EDIOriginationProcess/InvokeOriginationCoreWorkflow.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <soae-ab:explicitImports>

                                    <soae-ab:documentImport
                                    kind="http://www.w3.org/2001/XMLSchema"
                                    location="MISMO2.3.1/MORTGAGE_INSURANCE_APPLICATION_RESPONSE_v2_3_1_NewNamespace.xsd" tns="http://www.radian.biz/ClientConnectivity/zion/MISMOSchemas/MISMOv2.3.1/MortgageInsuranceApplicationResponse"/>
                                    </soae-ab:explicitImports>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    name="reply_internal_OutgoingMetadata" type="xsd:anyType"/>
                                    <bpws:variable
                                    messageType="ns62:InvokeOriginationCoreWorkflowInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_configured_metadata" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($InvokeOriginationCoreWorkflow_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy keepSrcElementName="yes">
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><md:message><md:protocol>http</md:protocol>
<md:httpMessage><md:transport><md:httpRequest/>
</md:transport>
</md:httpMessage>
</md:message>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="reply_internal_OutgoingMetadata"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:set-message-metadata($invoke_internal_OMAKey,$reply_internal_OutgoingMetadata)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$InterchangesToMISMOXSLTransformation]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'set-method','POST')]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'set-version','HTTP_11')]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'set-path','/Origination')]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'add-query','version',string($IntermediateMISMOVersion))]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'add-query','vendorid',string($ProviderID))]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'delete-header','content-type','*')]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'add-header','content-type','text/xml')]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>

                                    <bpws:from soae-bpel:mutable="yes"><![CDATA[soae-xf:update-http-metadata(soae-xf:get-message-metadata-reference($invoke_internal_OMAKey),'add-header','UUID',$MessageTransactionUUID)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="InvokeOriginationCoreWorkflowOperation"
                                    outputVariable="InvokeOriginationCoreWorkflow"
                                    partnerLink="InvokeOriginationCoreWorkflow"
                                    portType="ns62:InvokeOriginationCoreWorkflowServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:ima-key="InvokeOriginationCoreWorkflow_IMA_Key"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($invoke_internal_OMAKey)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:scope>
                                    <bpws:extensionActivity>
                                    <soae-ab:TransactionLog
                                    clusterName="false"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="LogCoreWorkflowResponse_DEVTaLog"
                                    logLevel="info"
                                    name="LogCoreWorkflowResponse_DEVTaLog"
                                    nodeName="false"
                                    optionalData="$InvokeOriginationCoreWorkflow.body" transactionID="false">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:if>
                                    <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Downstream system response:',';'),$InvokeOriginationCoreWorkflow.body)]]></bpws:from>

                                    <bpws:to variable="LogCoreWorkflowResponse_DEVTaLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:else>
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>

                                    <bpws:to variable="LogCoreWorkflowResponse_DEVTaLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </bpws:else>
                                    </bpws:if>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:comment>Downstream system response:</soae-ab:comment>
                                    </soae-ab:TransactionLog>
                                    </bpws:extensionActivity>
                                    <bpws:scope exitOnStandardFault="no" name="ScopeTAInvokeOriginationCoreWorkflow">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAInvokeOriginationCoreWorkflowFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence60">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAInvokeOriginationCoreWorkflow"
                                    from="$TransactionActivityXML"
                                    name="TAInvokeOriginationCoreWorkflow"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1042','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1042']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAInvokeOriginationCoreWorkflow"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1042'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1042']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAInvokeOriginationCoreWorkflow}"
                                    keepSrcElementName="false"
                                    name="UpdateTAInvokeOriginationCoreWorkflow" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAInvokeOriginationCoreWorkflow]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </bpws:sequence>
                            </bpws:scope>
                        </bpws:sequence>
                    </bpws:scope>
                </bpws:forEach>
                <bpws:if name="IfFileTypeTextAndWriteACKRequired">
                    <bpws:condition><![CDATA[$FileType!='XML' and ($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:WriteACKFile/text()='true')]]></bpws:condition>
                    <bpws:sequence name="Sequence4">
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="EDI997ParserInput"
                                expression="xpath:{''}"
                                keepSrcElementName="false"
                                name="EDI997ParserInput" xDestination="">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['']]></bpws:from>
                                    <bpws:to variable="EDI997ParserInput"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                        <bpws:if name="IfProviderIsBOA">
                            <bpws:condition><![CDATA[$ProviderID='BA']]></bpws:condition>
                            <bpws:extensionActivity>
                                <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="EDI997ParserInput"
                                    expression="xpath:{$EDI872BOA.body/interchanges[1]/ns11:Errors}"
                                    keepSrcElementName="false"
                                    name="UpdateBOAEDI997ParserInput" xDestination="$EDI997ParserInput">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI872BOA.body/interchanges[1]/ns11:Errors]]></bpws:from>
                                    <bpws:to variable="EDI997ParserInput"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:AssignBuilder>
                            </bpws:extensionActivity>
                            <bpws:else>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="EDI997ParserInput"
                                    expression="xpath:{$ParseEDI872.body/ns11:Errors}"
                                    keepSrcElementName="false"
                                    name="UpdateEDI997ParserInput" xDestination="$EDI997ParserInput">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ParseEDI872.body/ns11:Errors]]></bpws:from>
                                    <bpws:to variable="EDI997ParserInput"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                            </bpws:else>
                        </bpws:if>
                        <bpws:scope exitOnStandardFault="no" name="ScopeEDI997Parser">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrorToThreeEDI997ParserFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrorToThreeEDI997ParserFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrorToThreeEDI997ParserFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="EDI997ParserFailure"
                                    from="$XMLforGlobalException"
                                    name="EDI997ParserFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','2025','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="EDI997ParserFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'2025'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$EDI997ParserFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateEDI997ParserFailureFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI997ParserFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAEDI997ParserFailure">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAEDI997ParserFailure"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAEDI997ParserFailure"
                                    from="$TransactionActivityXML"
                                    name="TAEDI997ParserFailure"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','2025','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAEDI997ParserFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'2025'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2025']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAEDI997ParserFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateTAEDI997ParserFailure" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAEDI997ParserFailure]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:extensionActivity>
                                <soae-ab:CDEBuilder
                                    destinationType="{http://www.example.com/EDI872/cde/EDI997}OutputData"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="EDI997Parser"
                                    from="$EDI997ParserInput"
                                    inputContentType="text/xml"
                                    name="EDI997Parser"
                                    outputContentType="text/xml"
                                    outputIsElement="false"
                                    partnerLink="EDI997Parser"
                                    service="EDI997" type="{http://www.w3.org/2001/XMLSchema}anyType">
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    messageType="ns8:InputData" name="dataMappingInput"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI997ParserInput]]></bpws:from>
                                    <bpws:to part="body" variable="dataMappingInput"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="dataMappingInput"
                                    operation="dataMapping"
                                    outputVariable="EDI997Parser"
                                    partnerLink="EDI997Parser"
                                    portType="ns8:EDI997PortType"
                                    soae-bpel:always-create-key="no" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:CDEBuilder>
                            </bpws:extensionActivity>
                        </bpws:scope>
                        <bpws:scope exitOnStandardFault="no" name="ScopeTAEDI997ParserSuccess">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAEDI997ParserFailed"/>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:sequence name="Sequence60">
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAEDI997ParserSucccess"
                                    from="$TransactionActivityXML"
                                    name="TAEDI997ParserSucccess"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1051','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1051']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAEDI997ParserSucccess"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1051'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1051']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAEDI997ParserSucccess}"
                                    keepSrcElementName="false"
                                    name="UpdateTAEDI997ParserSucccess" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAEDI997ParserSucccess]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:scope>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.w3.org/2001/XMLSchema}string"
                                destinationTypeKind="TYPE"
                                destinationVariable="ACKFileName"
                                expression="xpath:{concat(&quot;S1$RAD$&quot;,exslt:format-date(&quot;now-local&quot;, &quot;yyyyMMdd&quot;),exslt:format-date(&quot;now-local&quot;, &quot;HHmmssSSS&quot;),&quot;.997&quot;)}"
                                keepSrcElementName="false"
                                name="ACKFileName" xDestination="">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("S1$RAD$",exslt:format-date("now-local", "yyyyMMdd"),exslt:format-date("now-local", "HHmmssSSS"),".997")]]></bpws:from>
                                    <bpws:to variable="ACKFileName"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                        <bpws:scope exitOnStandardFault="no" name="ScopeWrite997ACKFile">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrorToThreeWrite997ACKFileFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrorToThreeWrite997ACKFileFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrorToThreeWrite997ACKFileFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="Write997ACKFileFailure"
                                    from="$XMLforGlobalException"
                                    name="Write997ACKFileFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','2026','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="Write997ACKFileFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'2026'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$Write997ACKFileFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateWrite997ACKFileFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$Write997ACKFileFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAWrite997ACKFileFailure">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAWrite997ACKFileFailure"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAWrite997ACKFileFailure"
                                    from="$TransactionActivityXML"
                                    name="TAWrite997ACKFileFailure"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','2026','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAWrite997ACKFileFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'2026'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2026']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAWrite997ACKFileFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateTAWrite997ACKFileFailure" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAWrite997ACKFileFailure]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:extensionActivity>
                                <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="Write997ACKFile"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat(&quot;sftp://&quot;,$AppConfig/ns15:SFTPURL,$AppConfig/ns15:ResponseArchivalPath,$ACKFileName)"
                                    endpointConfigurationType="Configured"
                                    imaKey="Write997ACKFile_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="Write997ACKFile"
                                    partnerLink="Write997ACKFile"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="$EDI997Parser.body"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData binary="true"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:sftpTransport
                                    serviceURI="sftp://intconnect.radian.biz:22/origination/out/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="Write997ACKFileInput"
                                    inputMsgPart="body"
                                    operation="Write997ACKFileOperation"
                                    outputMsg="Write997ACKFileOutput"
                                    outputMsgPart="body"
                                    port="Write997ACKFilePort"
                                    service="{http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Write997ACKFile}Write997ACKFileService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/Write997ACKFile" wsdlFileName="/Origination/bin/EDIOriginationProcess/Write997ACKFile.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns54:Write997ACKFileInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($Write997ACKFile_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$EDI997Parser.body]]></bpws:from>
                                    <bpws:to part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat("sftp://",$AppConfig/ns15:SFTPURL,$AppConfig/ns15:ResponseArchivalPath,$ACKFileName)}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat("sftp://",$AppConfig/ns15:SFTPURL,$AppConfig/ns15:ResponseArchivalPath,$ACKFileName)]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="Write997ACKFile"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="Write997ACKFileOperation"
                                    partnerLink="Write997ACKFile"
                                    portType="ns54:Write997ACKFileServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:InvokeBuilder>
                            </bpws:extensionActivity>
                        </bpws:scope>
                        <bpws:scope exitOnStandardFault="no" name="ScopeTAWrite997ACKFileSuccess">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAWrite997ACKFileFailed"/>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:sequence name="Sequence60">
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAWrite997ACKFileSuccess"
                                    from="$TransactionActivityXML"
                                    name="TAWrite997ACKFileSuccess"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1052','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1052']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAWrite997ACKFileSuccess"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'1052'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1052']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAWrite997ACKFileSuccess}"
                                    keepSrcElementName="false"
                                    name="UpdateTAWrite997ACKFileSuccess" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAWrite997ACKFileSuccess]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:scope>
                    </bpws:sequence>
                </bpws:if>
            </bpws:sequence>
            <bpws:else>
                <bpws:sequence name="Sequence9">
                    <bpws:if name="If_ProviderIsWells">
                        <bpws:condition><![CDATA[$ProviderID = 'WF']]></bpws:condition>
                        <bpws:sequence name="ProviderIsWells">
                            <bpws:extensionActivity>
                                <soae-ab:Comment name="Comment">We don't intend to validate the schema at this point in ZION for Well Fargo requests.&#xd;
Once we have solution for the UTF-16 and UTF-8 file processing we will update the workflow.</soae-ab:Comment>
                            </bpws:extensionActivity>
                            <bpws:scope exitOnStandardFault="no" name="ScopeAddMISMO231Namespace">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeAddMISMO231NamespaceFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeAddMISMO231NamespaceFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeAddMISMO231NamespaceFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="AddMISMO231NamespaceFailure"
                                    from="$XMLforGlobalException"
                                    name="AddMISMO231NamespaceFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ApplicationName,'ExceptionCode','5004','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess- ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="AddMISMO231NamespaceFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ApplicationName"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'5004'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess- ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$AddMISMO231NamespaceFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateAddNamespaceFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$AddMISMO231NamespaceFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAAddMISMO231NamespaceFailure">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAAddMISMO231NamespaceFailure"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence37">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAAddMISMO231NamespaceFailure"
                                    from="$TransactionActivityXML"
                                    name="TAAddMISMO231NamespaceFailure"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','5004','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAAddMISMO231NamespaceFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'5004'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5004']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAAddMISMO231NamespaceFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateTAAddMISMO231NamespaceFailure" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAAddMISMO231NamespaceFailure]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence35">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="AddMISMO231Namespace"
                                    from="soae-xf:xml-parse-string(&quot;utf-8&quot;,&quot;base64&quot;,$Receive.body)"
                                    name="AddMISMO231Namespace"
                                    stylesheet="concat($AppConfig/ns15:FileURL,'SharedXSLs/Add',$IntermediateMISMOVersion,'Namespace.xsl')" stylesheetType="XPATH">
                                    <soae-ab:params/>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="GetRequestData"
                                    expression="xpath:{$AddMISMO231Namespace}"
                                    keepSrcElementName="false"
                                    name="UpdateRequestWithMISMO231Namespace" xDestination="$GetRequestData"/>
                                    </bpws:extensionActivity>
                                </bpws:sequence>
                            </bpws:scope>
                            <bpws:scope exitOnStandardFault="no" name="ScopeTAAddMISMO231Namespace">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAAddMISMO231Namespace"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence36">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAAddMISMO231Namespace"
                                    from="$TransactionActivityXML"
                                    name="TAAddMISMO231Namespace"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1007'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1007']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAAddMISMO231Namespace}"
                                    keepSrcElementName="false"
                                    name="UpdateTAAddMISMO231Namespace" xDestination="$TransactionActivityXML"/>
                                    </bpws:extensionActivity>
                                </bpws:sequence>
                            </bpws:scope>
                            <bpws:scope exitOnStandardFault="no" name="ScopeIncomingRequestSchemaValidation">
                                <bpws:faultHandlers>
                                    <bpws:catch
                                    faultElement="soae-fault:schemaValidateNodeFault" faultVariable="IncomingRequestSchemaValidationFaultVar">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeIncomingRequestSchemaValidationFailure"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeIncomingRequestSchemaValidationFailure" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeIncomingRequestSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="IncomingRequestSchemaValidationFailure"
                                    from="$XMLforGlobalException"
                                    name="IncomingRequestSchemaValidationFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ApplicationName,'ExceptionCode','2005','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess- ',$IncomingRequestSchemaValidationFaultVar/faultString),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="IncomingRequestSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ApplicationName"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'2005'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess- ',$IncomingRequestSchemaValidationFaultVar/faultString)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$IncomingRequestSchemaValidationFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateIncomingRequestSchemaValidationFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$IncomingRequestSchemaValidationFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAIncomingRequestSchemaValidationFailure">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAIncomingRequestSchemaValidationFailure"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence39">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAIncomingRequestSchemaValidationFailure"
                                    from="$TransactionActivityXML"
                                    name="TAIncomingRequestSchemaValidationFailure"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','2005','Description',concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:StatusDescription,'-',$IncomingRequestSchemaValidationFaultVar/faultString),'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAIncomingRequestSchemaValidationFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'2005'"/>

                                    <soae-ab:param
                                    name="Description" value="concat($StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2005']/ns16:StatusDescription,'-',$IncomingRequestSchemaValidationFaultVar/faultString)"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAIncomingRequestSchemaValidationFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateTAIncomingRequestSchemaValidationFailure" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAIncomingRequestSchemaValidationFailure]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:extensionActivity>
                                    <soae-ab:ValidationBuilder
                                    componentIdentification="elementName"
                                    data="$AddMISMO231Namespace"
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="IncomingRequestSchemaValidation"
                                    elementName="REQUEST_GROUP"
                                    name="IncomingRequestSchemaValidation"
                                    schemaIdentification="targetNamespace"
                                    targetNamespace="http://Radian.Operations.MortgageIns.Common.MISMOSchemas.APP_MORTGAGE_INSURANCE_APPLICATION_REQUEST_v2_3_1"
                                    throwFault="true" urlLocal="false"/>
                                </bpws:extensionActivity>
                            </bpws:scope>
                            <bpws:scope exitOnStandardFault="no" name="ScopeTAIncomingRequestSchemaValidation">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAIncomingRequestSchemaValidation"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence38">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAIncomingRequestSchemaValidation"
                                    from="$TransactionActivityXML"
                                    name="TAIncomingRequestSchemaValidation"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1008'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1008']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAIncomingRequestSchemaValidation}"
                                    keepSrcElementName="false"
                                    name="UpdateTAIncomingRequestSchemaValidation" xDestination="$TransactionActivityXML"/>
                                    </bpws:extensionActivity>
                                </bpws:sequence>
                            </bpws:scope>
                            <bpws:extensionActivity>
                                <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="InputFileNameWithoutExt"
                                    expression="xpath:{substring($GetMessageMetadata/md:transport/md:file/md:name/text(),1,(string-length($FileName)-4))}"
                                    keepSrcElementName="false"
                                    name="InputFileNameWithoutExt" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[substring($GetMessageMetadata/md:transport/md:file/md:name/text(),1,(string-length($FileName)-4))]]></bpws:from>
                                    <bpws:to variable="InputFileNameWithoutExt"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:AssignBuilder>
                            </bpws:extensionActivity>
                            <bpws:extensionActivity>
                                <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="DownstreamSystemSFTPPath"
                                    expression="xpath:{string($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:SFTPDownstreamsystemPath)}"
                                    keepSrcElementName="false"
                                    name="DownstreamSystemSFTPPath" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[string($OnBoardingConfig/ns17:Providers/ns17:Provider[ns17:ProviderCode/text()=$ProviderID]/ns17:SFTPDownstreamsystemPath)]]></bpws:from>
                                    <bpws:to variable="DownstreamSystemSFTPPath"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                </soae-ab:AssignBuilder>
                            </bpws:extensionActivity>
                            <bpws:scope exitOnStandardFault="no" name="ScopeWriteEDIInputFileToDownstreamSystem">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                                    <bpws:sequence>
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="WriteEDIInputFileToDownstreamSystemFailure"
                                    from="$XMLforGlobalException"
                                    name="WriteEDIInputFileToDownstreamSystemFailure"
                                    stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','2023','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>

                                    <bpws:to variable="WriteEDIInputFileToDownstreamSystemFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstBatch" value="'true'"/>
                                    <soae-ab:param
                                    name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param
                                    name="ExceptionCode" value="'2023'"/>
                                    <soae-ab:param
                                    name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:StatusName"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:LogLevel"/>
                                    <soae-ab:param
                                    name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:Severity"/>
                                    <soae-ab:param
                                    name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:Priority"/>
                                    <soae-ab:param
                                    name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param
                                    name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param
                                    name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseCondition"/>
                                    <soae-ab:param
                                    name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="XMLforGlobalException"
                                    expression="xpath:{$WriteEDIInputFileToDownstreamSystemFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateWriteEDIInputFileToDownstreamSystemFailure" xDestination="$XMLforGlobalException">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$WriteEDIInputFileToDownstreamSystemFailure]]></bpws:from>

                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:scope
                                    exitOnStandardFault="no" name="ScopeTAWriteEDIInputFileToDownstreamSystemFailed">
                                    <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAWriteEDIInputFileToDownstreamSystemFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                    </bpws:faultHandlers>
                                    <bpws:sequence name="Sequence100">
                                    <bpws:extensionActivity>

                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAWriteEDIInputFileToDownstreamSystemFailed"
                                    from="$TransactionActivityXML"
                                    name="TAWriteEDIInputFileToDownstreamSystemFailed"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','2023','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>

                                    <bpws:to variable="TAWriteEDIInputFileToDownstreamSystemFailed"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>

                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>

                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>

                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>

                                    <soae-ab:param
                                    name="RecordCount" value="1"/>

                                    <soae-ab:param
                                    name="Status" value="'FAIL'"/>

                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>

                                    <soae-ab:param
                                    name="Code" value="'2023'"/>

                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='2023']/ns16:StatusDescription"/>

                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>

                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAWriteEDIInputFileToDownstreamSystemFailed}"
                                    keepSrcElementName="false"
                                    name="UpdateTAWriteEDIInputFileToDownstreamSystemFailed" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>

                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAWriteEDIInputFileToDownstreamSystemFailed]]></bpws:from>

                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="SetGlobalErrortoThreeWriteEDIInputFileToDownstreamSystem"
                                    expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                    keepSrcElementName="false"
                                    name="SetGlobalErrortoThreeWriteEDIInputFileToDownstreamSystem" xDestination="">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>

                                    <bpws:to variable="SetGlobalErrortoThreeWriteEDIInputFileToDownstreamSystem"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                    <bpws:rethrow/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence19">
                                    <bpws:extensionActivity>
                                    <soae-ab:InvokeBuilder
                                    addAttachments="false"
                                    allowCrossAppInvocation="false"
                                    allowDynamicInterappInvocation="false"
                                    allowLocalInvocation="false"
                                    bindingType="Plain"
                                    compression="identity"
                                    destinationType="{http://www.example.com/Origination/http/bin/EDIOriginationProcess/WriteEDIInputFileToMatrix}WriteEDIInputFileToMatrixOutput"
                                    destinationTypeKind="MESSAGE"
                                    destinationVariable="WriteEDIInputFileToDownstreamSystem"
                                    dontExtractMsgToVar="false"
                                    dynamicAddress="concat('sftp://',$AppConfig/ns15:SFTPURL,$DownstreamSystemSFTPPath,$InputFileNameWithoutExt,'_',$TransactionUUID,'.xml')"
                                    endpointConfigurationType="Configured"
                                    imaKey="WriteEDIInputFileToDownstreamSystem_IMA_Key"
                                    inboundPoliciesGroup=""
                                    messageBodyFrom=""
                                    multipartInboundData="false"
                                    multipartOutboundData="false"
                                    name="WriteEDIInputFileToDownstreamSystem"
                                    partnerLink="WriteEDIInputFileToDownstreamSystem"
                                    passThroughEnabled="false"
                                    rawEnvelopeFrom=""
                                    receiveRawEnvelope="false"
                                    sendRawEnvelope="false"
                                    throwFault="false"
                                    timeout="xpath:{}" useDynamicAddress="true">
                                    <soae-ab:outputDataMapping
                                    partName="" xpath="$Receive.body"/>
                                    <soae-ab:outboundPolicies/>
                                    <soae-ab:inputData
                                    binary="false"
                                    empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:outputData
                                    binary="false"
                                    oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                                    <soae-ab:sftpTransport
                                    serviceURI="sftp://intconnect.radian.biz:22/matrix/wells/in/" soapAction=""/>
                                    <soae-ab:wsdlEndpointConfig
                                    defaultFlags="0"
                                    inputMsg="WriteEDIInputFileToDownstreamSystemInput"
                                    inputMsgPart="body"
                                    operation="WriteEDIInputFileToDownstreamSystemOperation"
                                    outputMsg="WriteEDIInputFileToDownstreamSystemOutput"
                                    outputMsgPart="body"
                                    port="WriteEDIInputFileToDownstreamSystemPort"
                                    service="{http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem}WriteEDIInputFileToDownstreamSystemService"
                                    soapVersion="1.1"
                                    tns="http://www.example.com/Origination/sftp/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteEDIInputFileToDownstreamSystem.wsdl"/>
                                    <soae-ab:inboundPolicies/>
                                    <bpws:scope>
                                    <bpws:variables>
                                    <bpws:variable
                                    name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns52:WriteEDIInputFileToDownstreamSystemInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                    </bpws:variables>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteEDIInputFileToDownstreamSystem_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$Receive.body]]></bpws:from>
                                    <bpws:to
                                    part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>

                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat('sftp://',$AppConfig/ns15:SFTPURL,$DownstreamSystemSFTPPath,$InputFileNameWithoutExt,'_',$TransactionUUID,'.xml')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat('sftp://',$AppConfig/ns15:SFTPURL,$DownstreamSystemSFTPPath,$InputFileNameWithoutExt,'_',$TransactionUUID,'.xml')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="WriteEDIInputFileToDownstreamSystem"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteEDIInputFileToDownstreamSystemOperation"
                                    partnerLink="WriteEDIInputFileToDownstreamSystem"
                                    portType="ns52:WriteEDIInputFileToDownstreamSystemServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:InvokeBuilder>
                                    </bpws:extensionActivity>
                                </bpws:sequence>
                            </bpws:scope>
                            <bpws:scope exitOnStandardFault="no" name="ScopeTAWriteEDIInputFileToDownstreamSystem">
                                <bpws:faultHandlers>
                                    <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAWriteEDIInputFileToDownstreamSystemFailed"/>
                                    </bpws:sequence>
                                    </bpws:catch>
                                </bpws:faultHandlers>
                                <bpws:sequence name="Sequence60">
                                    <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAWriteEDIInputFileToDownstreamSystem"
                                    from="$TransactionActivityXML"
                                    name="TAWriteEDIInputFileToDownstreamSystem"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1049','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1049']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAWriteEDIInputFileToDownstreamSystem"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param
                                    name="Status" value="'SUCCESS'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param
                                    name="Code" value="'1049'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1049']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                    </bpws:extensionActivity>
                                    <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAWriteEDIInputFileToDownstreamSystem}"
                                    keepSrcElementName="false"
                                    name="UpdateTAWriteEDIInputFileToDownstreamSystem" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAWriteEDIInputFileToDownstreamSystem]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                    </bpws:extensionActivity>
                                </bpws:sequence>
                            </bpws:scope>
                        </bpws:sequence>
                    </bpws:if>
                </bpws:sequence>
            </bpws:else>
        </bpws:if>
        <bpws:scope exitOnStandardFault="no" name="ScopeReply">
            <bpws:faultHandlers>
                <bpws:catchAll>
                    <bpws:sequence>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="SetGlobalErrorToThreeReplyFail"
                                expression="xpath:{soae-cache:set-string('msg:GlobalError','03')}"
                                keepSrcElementName="false"
                                name="SetGlobalErrorToThreeReplyFail" xDestination="">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-cache:set-string('msg:GlobalError','03')]]></bpws:from>
                                    <bpws:to variable="SetGlobalErrorToThreeReplyFail"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:XSLTransform
                                destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                destinationTypeKind="TYPE"
                                destinationVariable="ReplyFailure"
                                from="$XMLforGlobalException"
                                name="ReplyFailure"
                                stylesheet="CreateExceptionLog.xsl" stylesheetType="URL">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateExceptionLog.xsl',$XMLforGlobalException,'FirstBatch','true','DtTimeStamp',soae-xf:get-time(),'RequestUUID',$TransactionUUID,'TransactionID',soae-xf:get-transaction-id(),'CertificateNumber','NA','ApplicationName','ZION-Origination','ExceptionCode','5010','ExceptionName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:StatusName,'Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:StatusDescription,'Loglevel',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:LogLevel,'Severity',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:Severity,'Priority',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:Priority,'AdditionalInfo',concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:AdditionalInfo),'ProviderName',$ProviderName,'ResponseName',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseName,'ResponseCondition',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseCondition,'ResponseCode',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseCode,'ResponseDescription',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseDescription,'IncomingFileName',$FileName)]]></bpws:from>
                                    <bpws:to variable="ReplyFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                                <soae-ab:params>
                                    <soae-ab:param name="FirstBatch" value="'true'"/>
                                    <soae-ab:param name="DtTimeStamp" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="RequestUUID" value="$TransactionUUID"/>
                                    <soae-ab:param name="TransactionID" value="soae-xf:get-transaction-id()"/>
                                    <soae-ab:param
                                    name="CertificateNumber" value="'NA'"/>
                                    <soae-ab:param
                                    name="ApplicationName" value="'ZION-Origination'"/>
                                    <soae-ab:param name="ExceptionCode" value="'5010'"/>
                                    <soae-ab:param name="ExceptionName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:StatusName"/>
                                    <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:StatusDescription"/>
                                    <soae-ab:param name="Loglevel" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:LogLevel"/>
                                    <soae-ab:param name="Severity" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:Severity"/>
                                    <soae-ab:param name="Priority" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:Priority"/>
                                    <soae-ab:param name="AdditionalInfo" value="concat('EDIOriginationProcess - ',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:AdditionalInfo)"/>
                                    <soae-ab:param name="ProviderName" value="$ProviderName"/>
                                    <soae-ab:param name="ResponseName" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseName"/>
                                    <soae-ab:param
                                    name="ResponseCondition" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseCondition"/>
                                    <soae-ab:param name="ResponseCode" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseCode"/>
                                    <soae-ab:param
                                    name="ResponseDescription" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:ResponseDescription"/>
                                    <soae-ab:param
                                    name="IncomingFileName" value="$FileName"/>
                                </soae-ab:params>
                            </soae-ab:XSLTransform>
                        </bpws:extensionActivity>
                        <bpws:extensionActivity>
                            <soae-ab:AssignBuilder
                                destinationType="{http://www.radian.biz/ClientConnectivity/zion/Origination/ExceptionConfig}EXCEPTIONS"
                                destinationTypeKind="ELEMENT"
                                destinationVariable="XMLforGlobalException"
                                expression="xpath:{$ReplyFailure}"
                                keepSrcElementName="false"
                                name="UpdateReplyFailure" xDestination="$XMLforGlobalException">
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$ReplyFailure]]></bpws:from>
                                    <bpws:to variable="XMLforGlobalException"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </soae-ab:AssignBuilder>
                        </bpws:extensionActivity>
                        <bpws:scope exitOnStandardFault="no" name="ScopeTAReplyFailure">
                            <bpws:faultHandlers>
                                <bpws:catch faultName="bpws:subLanguageExecutionFault">
                                    <bpws:sequence>
                                    <bpws:empty name="EmptyTAReplyFailed"/>
                                    </bpws:sequence>
                                </bpws:catch>
                            </bpws:faultHandlers>
                            <bpws:sequence name="Sequence100">
                                <bpws:extensionActivity>
                                    <soae-ab:XSLTransform
                                    destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                                    destinationTypeKind="TYPE"
                                    destinationVariable="TAReplyFailure"
                                    from="$TransactionActivityXML"
                                    name="TAReplyFailure"
                                    stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','FAIL','DateTime',soae-xf:get-time(),'Code','5010','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TAReplyFailure"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    <soae-ab:params>
                                    <soae-ab:param
                                    name="FirstActivity" value="1"/>
                                    <soae-ab:param
                                    name="BatchActivity" value="0"/>
                                    <soae-ab:param
                                    name="MessageIdentifier" value="$TransactionUUID"/>
                                    <soae-ab:param
                                    name="RecordCount" value="1"/>
                                    <soae-ab:param name="Status" value="'FAIL'"/>
                                    <soae-ab:param
                                    name="DateTime" value="soae-xf:get-time()"/>
                                    <soae-ab:param name="Code" value="'5010'"/>
                                    <soae-ab:param
                                    name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='5010']/ns16:StatusDescription"/>
                                    <soae-ab:param
                                    name="MessageID" value="'NA'"/>
                                    </soae-ab:params>
                                    </soae-ab:XSLTransform>
                                </bpws:extensionActivity>
                                <bpws:extensionActivity>
                                    <soae-ab:AssignBuilder
                                    destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                                    destinationTypeKind="ELEMENT"
                                    destinationVariable="TransactionActivityXML"
                                    expression="xpath:{$TAReplyFailure}"
                                    keepSrcElementName="false"
                                    name="UpdateTAReplyFailure" xDestination="$TransactionActivityXML">
                                    <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TAReplyFailure]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                    </bpws:scope>
                                    </soae-ab:AssignBuilder>
                                </bpws:extensionActivity>
                            </bpws:sequence>
                        </bpws:scope>
                        <bpws:rethrow/>
                    </bpws:sequence>
                </bpws:catchAll>
            </bpws:faultHandlers>
            <bpws:sequence name="Sequence18">
                <bpws:extensionActivity>
                    <soae-ab:ReplyBuilder addAttachments="false"
                        compression="identity" destinationVariable=""
                        messageBodyFrom="" name="Reply"
                        passThroughEnabled="false" rawEnvelopeFrom=""
                        sendRawEnvelope="false" throwFault="false">
                        <soae-ab:outputDataMapping partName="" xpath="$Receive.body"/>
                        <soae-ab:outboundPolicies/>
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:reply operation="ReceiveOperation"
                                    partnerLink="Receive" portType="ns47:ReceiveServicePortType"/>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:ReplyBuilder>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="ResponseFlag"
                        expression="xpath:{'true'}"
                        keepSrcElementName="false"
                        name="UpdateResponseFalgtoTrue" xDestination="$ResponseFlag">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA['true']]></bpws:from>
                                    <bpws:to variable="ResponseFlag"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
            </bpws:sequence>
        </bpws:scope>
        <bpws:scope exitOnStandardFault="no" name="ScopeTATransactionCompletedSuccess">
            <bpws:faultHandlers>
                <bpws:catch faultName="bpws:subLanguageExecutionFault">
                    <bpws:sequence>
                        <bpws:empty name="EmptyTAScopeTATransactionCompletedSuccess"/>
                    </bpws:sequence>
                </bpws:catch>
            </bpws:faultHandlers>
            <bpws:sequence name="Sequence60">
                <bpws:extensionActivity>
                    <soae-ab:XSLTransform
                        destinationType="{http://www.w3.org/2001/XMLSchema}anyType"
                        destinationTypeKind="TYPE"
                        destinationVariable="TATransactionCompletedSuccess"
                        from="$TransactionActivityXML"
                        name="TATransactionCompletedSuccess"
                        stylesheet="CreateActivityNode.xsl" stylesheetType="URL">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[bpws:doXslTransform('CreateActivityNode.xsl',$TransactionActivityXML,'FirstActivity',1,'BatchActivity',0,'MessageIdentifier',$TransactionUUID,'RecordCount',1,'Status','SUCCESS','DateTime',soae-xf:get-time(),'Code','1034','Description',$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1034']/ns16:StatusDescription,'MessageID','NA')]]></bpws:from>
                                    <bpws:to variable="TATransactionCompletedSuccess"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                        <soae-ab:params>
                            <soae-ab:param name="FirstActivity" value="1"/>
                            <soae-ab:param name="BatchActivity" value="0"/>
                            <soae-ab:param name="MessageIdentifier" value="$TransactionUUID"/>
                            <soae-ab:param name="RecordCount" value="1"/>
                            <soae-ab:param name="Status" value="'SUCCESS'"/>
                            <soae-ab:param name="DateTime" value="soae-xf:get-time()"/>
                            <soae-ab:param name="Code" value="'1034'"/>
                            <soae-ab:param name="Description" value="$StatusCodeConfig/ns16:STATUS[ns16:StatusCode/text()='1034']/ns16:StatusDescription"/>
                            <soae-ab:param name="MessageID" value="'NA'"/>
                        </soae-ab:params>
                    </soae-ab:XSLTransform>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <soae-ab:AssignBuilder
                        destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                        destinationTypeKind="ELEMENT"
                        destinationVariable="TransactionActivityXML"
                        expression="xpath:{$TATransactionCompletedSuccess}"
                        keepSrcElementName="false"
                        name="UpdateTATransactionCompletedSuccess" xDestination="$TransactionActivityXML">
                        <bpws:scope>
                            <bpws:sequence>
                                <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TATransactionCompletedSuccess]]></bpws:from>
                                    <bpws:to variable="TransactionActivityXML"/>
                                    </bpws:copy>
                                </bpws:assign>
                            </bpws:sequence>
                        </bpws:scope>
                    </soae-ab:AssignBuilder>
                </bpws:extensionActivity>
            </bpws:sequence>
        </bpws:scope>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                destinationTypeKind="ELEMENT"
                destinationVariable="TransactionActivityXML"
                expression="xpath:{$RecordCount}"
                keepSrcElementName="false" name="UpdateRecordCountinTA" xDestination="$TransactionActivityXML/ns31:HEADER/ns31:TotalRecordCount">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[$RecordCount]]></bpws:from>
                                <bpws:to><![CDATA[$TransactionActivityXML/ns31:HEADER/ns31:TotalRecordCount]]></bpws:to>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                destinationTypeKind="ELEMENT"
                destinationVariable="TransactionActivityXML"
                expression="xpath:{$RecordCount}"
                keepSrcElementName="false" name="UpdateMessageCountinTA" xDestination="$TransactionActivityXML/ns31:HEADER/ns31:TotalMessageCount">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[$RecordCount]]></bpws:from>
                                <bpws:to><![CDATA[$TransactionActivityXML/ns31:HEADER/ns31:TotalMessageCount]]></bpws:to>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <soae-ab:AssignBuilder
                destinationType="{http://www.radian.biz/ClientConnectivity/zion/TransactionActivity}TRANSACTIONACTIVITY"
                destinationTypeKind="ELEMENT"
                destinationVariable="TransactionActivityXML"
                expression="xpath:{soae-xf:calculate-time-delta($StartTime,soae-xf:get-time())}"
                keepSrcElementName="false" name="UpdateTotalTime" xDestination="$TransactionActivityXML/ns31:HEADER/ns31:TotalTransTimeInSecs">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:assign validate="no">
                            <bpws:copy>
                                <bpws:from><![CDATA[soae-xf:calculate-time-delta($StartTime,soae-xf:get-time())]]></bpws:from>
                                <bpws:to><![CDATA[$TransactionActivityXML/ns31:HEADER/ns31:TotalTransTimeInSecs]]></bpws:to>
                            </bpws:copy>
                        </bpws:assign>
                    </bpws:sequence>
                </bpws:scope>
            </soae-ab:AssignBuilder>
        </bpws:extensionActivity>
        <bpws:if name="If_Write_TALog_Happypath">
            <bpws:condition><![CDATA[translate($AppConfig/ns15:WriteTALogsEnabled,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')='TRUE']]></bpws:condition>
            <bpws:sequence name="Sequence10">
                <bpws:scope exitOnStandardFault="no" name="ScopeWriteTALogonSuccess">
                    <bpws:faultHandlers>
                        <bpws:catch faultName="soae-bpel:invocationAgentFailure">
                            <bpws:sequence>
                                <bpws:empty name="EmptyWriteTALogOnSuccessFailure"/>
                            </bpws:sequence>
                        </bpws:catch>
                    </bpws:faultHandlers>
                    <bpws:extensionActivity>
                        <soae-ab:InvokeBuilder addAttachments="false"
                            allowCrossAppInvocation="false"
                            allowDynamicInterappInvocation="false"
                            allowLocalInvocation="false"
                            bindingType="Plain" compression="identity"
                            destinationType="{http://www.example.com/EDI872/http/bin/EDIOriginationProcess/Invoke}InvokeOutput"
                            destinationTypeKind="MESSAGE"
                            destinationVariable="WriteTALogonSuccess"
                            dontExtractMsgToVar="false"
                            dynamicAddress="concat('file://',$AppConfig/ns15:TransactionActivityPath/text(),soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date(&quot;now-local&quot;, &quot;ddMMyyyy&quot;),'-',exslt:format-date(&quot;now-local&quot;, &quot;HHmmssSSS&quot;),'.xml')"
                            endpointConfigurationType="Configured"
                            imaKey="WriteTALogonSuccess_IMA_Key"
                            inboundPoliciesGroup="" messageBodyFrom=""
                            multipartInboundData="false"
                            multipartOutboundData="false"
                            name="WriteTALogonSuccess"
                            partnerLink="WriteTALogonSuccess"
                            passThroughEnabled="false"
                            rawEnvelopeFrom=""
                            receiveRawEnvelope="false"
                            sendRawEnvelope="false" throwFault="false"
                            timeout="xpath:{}" useDynamicAddress="true">
                            <soae-ab:outputDataMapping partName="" xpath="$TransactionActivityXML"/>
                            <soae-ab:outboundPolicies/>
                            <soae-ab:inputData binary="false"
                                empty="false" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                            <soae-ab:outputData binary="false"
                                oneway="true" xsdType="{http://www.w3.org/2001/XMLSchema}anyType"/>
                            <soae-ab:fileTransport
                                serviceURI="file:///opt/apps/zion/transactionlogs/" soapAction=""/>
                            <soae-ab:wsdlEndpointConfig defaultFlags="0"
                                inputMsg="WriteTALogonSuccessInput"
                                inputMsgPart="body"
                                operation="WriteTALogonSuccessOperation"
                                outputMsg="WriteTALogonSuccessOutput"
                                outputMsgPart="body"
                                port="WriteTALogonSuccessPort"
                                service="{http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogonSuccess}WriteTALogonSuccessService"
                                soapVersion="1.1"
                                tns="http://www.example.com/Origination/file/bin/EDIOriginationProcess/WriteTALogonSuccess" wsdlFileName="/Origination/bin/EDIOriginationProcess/WriteTALogonSuccess.wsdl"/>
                            <soae-ab:inboundPolicies/>
                            <bpws:scope>
                                <bpws:variables>
                                    <bpws:variable name="dummy" type="xsd:anyType"/>
                                    <bpws:variable
                                    name="invoke_internal_OMAKey" type="xsd:anyType">
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve">0</bpws:literal>
                                    </bpws:from>
                                    </bpws:variable>
                                    <bpws:variable
                                    messageType="ns63:WriteTALogonSuccessInput" name="reply_internal_OutputVariable"/>
                                    <bpws:variable
                                    name="invoke_internal_epr" type="xsd:anyType"/>
                                </bpws:variables>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:invalidate-key($WriteTALogonSuccess_IMA_Key)]]></bpws:from>
                                    <bpws:to variable="dummy"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:create-oma-key(false())]]></bpws:from>
                                    <bpws:to variable="invoke_internal_OMAKey"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$TransactionActivityXML]]></bpws:from>
                                    <bpws:to part="body" variable="reply_internal_OutputVariable"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from>
                                    <bpws:literal xml:space="preserve"><sref:service-ref><wsa:EndpointReference><wsa:Address>xpath:{concat('file://',$AppConfig/ns15:TransactionActivityPath/text(),soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')}</wsa:Address>
</wsa:EndpointReference>
</sref:service-ref>
</bpws:literal>
                                    </bpws:from>
                                    <bpws:to variable="invoke_internal_epr"/>
                                    </bpws:copy>
                                    <bpws:copy>
                                    <bpws:from><![CDATA[concat('file://',$AppConfig/ns15:TransactionActivityPath/text(),soae-xf:get-node-name(),'_ZION-Origination_',$TransactionUUID,'_',exslt:format-date("now-local", "ddMMyyyy"),'-',exslt:format-date("now-local", "HHmmssSSS"),'.xml')]]></bpws:from>
                                    <bpws:to variable="invoke_internal_epr">
                                    <bpws:query><![CDATA[/sref:service-ref[1]/wsa:EndpointReference[1]/wsa:Address[1]/text()[1]]]></bpws:query>
                                    </bpws:to>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[$invoke_internal_epr]]></bpws:from>
                                    <bpws:to partnerLink="WriteTALogonSuccess"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    <bpws:invoke
                                    inputVariable="reply_internal_OutputVariable"
                                    operation="WriteTALogonSuccessOperation"
                                    partnerLink="WriteTALogonSuccess"
                                    portType="ns63:WriteTALogonSuccessServicePortType"
                                    soae-bpel:always-create-key="yes"
                                    soae-bpel:oma-key="invoke_internal_OMAKey" soae-bpel:throw-on-fault="yes"/>
                                </bpws:sequence>
                            </bpws:scope>
                        </soae-ab:InvokeBuilder>
                    </bpws:extensionActivity>
                </bpws:scope>
            </bpws:sequence>
        </bpws:if>
        <bpws:extensionActivity>
            <soae-ab:TransactionLog clusterName="false"
                destinationType="{http://www.w3.org/2001/XMLSchema}boolean"
                destinationTypeKind="TYPE"
                destinationVariable="TALog_ZIONLog" logLevel="info"
                name="TALog_ZIONLog" nodeName="false"
                optionalData="$TransactionActivityXML" transactionID="false">
                <bpws:scope>
                    <bpws:sequence>
                        <bpws:if>
                            <bpws:condition><![CDATA[soae-xf:get-transaction-log-enabled('info')]]></bpws:condition>
                            <bpws:scope>
                                <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[soae-xf:write-transaction-log('info',concat('Comment: ','Transaction activity log follows:',';'),$TransactionActivityXML)]]></bpws:from>
                                    <bpws:to variable="TALog_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                </bpws:sequence>
                            </bpws:scope>
                            <bpws:else>
                                <bpws:scope>
                                    <bpws:sequence>
                                    <bpws:assign validate="no">
                                    <bpws:copy>
                                    <bpws:from><![CDATA[false()]]></bpws:from>
                                    <bpws:to variable="TALog_ZIONLog"/>
                                    </bpws:copy>
                                    </bpws:assign>
                                    </bpws:sequence>
                                </bpws:scope>
                            </bpws:else>
                        </bpws:if>
                    </bpws:sequence>
                </bpws:scope>
                <soae-ab:comment>Transaction activity log follows:</soae-ab:comment>
            </soae-ab:TransactionLog>
        </bpws:extensionActivity>
    </bpws:sequence>
</bpws:process>
